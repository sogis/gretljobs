/*
Publiziert die ARP wildruhezonen nach geodienste.ch
*/

import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths


def pathToTempFolder = System.getProperty("java.io.tmpdir")
def xtfFileName = "ch.so.arp.wildruhezonen.mgdm.xtf"
def zipFileName = "ch.so.arp.wildruhezonen.mgdm.zip"


defaultTasks 'uploadMgdmWildruhezonen'

/*
Package and upload to the KKGEO AI
*/

task exportMgdmWildruhezonen(type: Ili2pgExport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = "Wildruhezonen_LV95_V2_1"
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = "arp_wildruhezonen_mgdm_v1"
    dataFile = file(xtfFileName)
    disableValidation = true
}

task validateMgdmWildruhezonen(type: IliValidator, dependsOn: 'exportMgdmWildruhezonen') {
    dataFiles = [file(xtfFileName)]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    logFile = "ilivalidator.log"
    failOnError = true
}

task zipMgdmWildruhezonen(type: Zip, dependsOn: 'validateMgdmWildruhezonen'){
    from pathToTempFolder
    from "."
    include xtfFileName
    archiveName zipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmWildruhezonen(dependsOn: 'zipMgdmWildruhezonen') {
    description = "LÃ¤dt die Daten in die Aggregationsinfrastruktur hoch."
    def aiLogin = aiUser + ":" + aiPwd
    def serverUrl = "https://" + aiServer + "/data_agg/interlis/import"
    def zipFilePath = Paths.get(pathToTempFolder, zipFileName)

    doLast {   
        def response = ["curl", "-u", aiLogin, "-F", "topic=wildruhezonen_v2_1",
                        "-F", "lv95_file=@" + zipFilePath, "-F", "publish=true", serverUrl
                       ].execute().text
        println(response)
        
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }
    }
}
