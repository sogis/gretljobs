import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: 'de.undercouch.download'
apply plugin: 'ch.so.agi.gretl'

defaultTasks 'getToken'

tasks.register('foo') {
    doLast {
        println 'foo'
    }
} 

import groovy.json.JsonSlurper

def basicHeader = "Basic " + Base64.getEncoder().encodeToString((clientId + ":" + clientSecret).getBytes())
def token = ""

tasks.register('getToken', Curl) {
    serverUrl = "https://auth.example.ch/oauth2/token"
    method = MethodType.POST
    outputFile = file("./token.json")
    expectedStatusCode = 200
    data = "grant_type=client_credentials&client_id=$clientId"
    headers = [
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": basicHeader
    ]

    doLast {
        def slurper = new JsonSlurper();
        def slurped = slurper.parseText(outputFile.text)

        if (slurped.access_token != null)
            token = slurped.access_token

        if(token.length() == 0)
            throw new GradleException("Failed to retrieve access token")

        println "Length of access token is: " + token.length()
    }
}




// task downloadKbsData(type: Download) {
//     src 'https://altlast4web.verw.rootso.org/interlis_exports/so_pub/data.zip'
//     dest pathToTempFolder
//     overwrite true
//     acceptAnyCertificate true

//     doLast {
//         println("********"+simiMetadataServiceUrl+"*********")
//     }
// }

// task unzipKbsData(type: Copy, dependsOn: 'downloadKbsData') {
//     from zipTree(pathToDataZip)
//     into file(pathToUnzipFolder)
//     include '**/*.xtf'
//     rename { String fileName ->
//             if (fileName.contains(kbsData)) {
//                 return kbsData + '.xtf'
//             }
//             return fileName
//         }
// }

// task importKbsData(type: Ili2pgImport, dependsOn: 'unzipKbsData') {
//     database = [dbUriPub, dbUserPub, dbPwdPub]
//     dbschema = 'afu_altlasten_pub_v2'
//     models = 'SO_AFU_KbS_Publikation__20230104'
//     dataFile = file(Paths.get(pathToUnzipFolder.toString(), kbsData + '.xtf'))
//     deleteData = true
//     strokeArcs = true
// }

// task downloadKbsRestrictedData(type: Download, dependsOn: 'importKbsData') {
//     src 'https://altlast4web.verw.rootso.org/interlis_exports/so_res/data.zip'
//     dest pathToTempFolder
//     overwrite true
//     acceptAnyCertificate true
// }

// task unzipKbsRestrictedData(type: Copy, dependsOn: 'downloadKbsRestrictedData') {
//     from zipTree(pathToDataZip)
//     into file(pathToUnzipFolder)
//     include '**/*.xtf'
//     rename { String fileName ->
//             if (fileName.contains(kbsDataRestricted)) {
//                 return kbsDataRestricted + '.xtf'
//             }
//             return fileName
//         }
// }

// task importKbsRestrictedData(type: Ili2pgImport, dependsOn: 'unzipKbsRestrictedData') {
//     database = [dbUriPub, dbUserPub, dbPwdPub]
//     dbschema = 'afu_altlasten_restricted_pub_v1'
//     models = 'SO_AFU_KbS_Publikation_restricted_20221209'
//     dataFile = file(Paths.get(pathToUnzipFolder.toString(), kbsDataRestricted + '.xtf'))
//     deleteData = true
//     strokeArcs = true
// }

// task refreshSolrKbs(type:Exec, dependsOn: 'importKbsRestrictedData') {
//     commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.afu.altlasten.standorte'
// }

// task refreshSolrKbsRestricted(type:Exec, dependsOn:'refreshSolrKbs') {
//         commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.afu.altlasten.standorte_geschuetzt'
// }

// task downloadMgdm(type: Download, dependsOn: 'refreshSolrKbsRestricted') {
//     src "https://altlast4web.verw.rootso.org/interlis_exports/mgdm/data.zip"
//     dest pathToTempFolder
//     overwrite true
//     acceptAnyCertificate true
// }

// task uploadMgdm(dependsOn: 'downloadMgdm') {
//     doLast {
//         // def response = ["curl", "-u", aiLogin, "-F", "topic=kataster_belasteter_standorte_v1_4", "-F",
//         //                 "lv95_file=@" + Paths.get(pathToTempFolder.toString(), 'data.zip'), "-F", "publish=true",
//         //                 "https://" + aiServer + "/data_agg/interlis/import"].execute().text
//         // println(response)
//         // if (response.contains("false") || response == null || response.trim().isEmpty()) {
//         //     throw new GradleException()
//         // }
//         def response = ["curl", "-X", "GET", "-H", "Content-Type: text/html", 
//                         "http://simi.gdi-test.svc/app/rest/doc?dataident=ch.so.afu.belastete_standorte&published=2025-04-04T05:44:27.238"].execute().text
//         println(response)
//     }
// }

// task publishPub(type: Publisher, dependsOn: 'uploadMgdm') {
//     dataIdent = "ch.so.afu.belastete_standorte"
//     userFormats = true
//     database = [dbUriPub,dbUserPub,dbPwdPub]
//     dbSchema = "afu_altlasten_pub_v2"
//     modelsToPublish = "SO_AFU_KbS_Publikation__20230104"
//     target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
//     kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
//     kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
//     grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
//     if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
// }
