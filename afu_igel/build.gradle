import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks 'transformAndPub', 'refreshSolr', 'updateSearchIndex_1', 'updateSearchIndex_2', 'updateSearchIndex_3'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def igelTypes = ["standort", "stall"]

igelTypes.each { igelType ->
    task "download_$igelType"(type: Download) {
        description = "Download $igelType."
        src "https://igel.softec.ch/so/api/export/"+igelType+"?token="+igelToken
        dest pathToTempFolder + "/"+igelType+".json"
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }
    }

    task "import_$igelType"(type: JsonImport, dependsOn: 'download_'+igelType) {
        description = "Import $igelType."
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        jsonFile = pathToTempFolder + "/"+igelType+".json"
        qualifiedTableName = "afu_igel.igel_"+igelType
        columnName = "content"
        deleteAllRows = true
    }
}

task dbImport() {
    description = "Aggregation task."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('import_') }
    }

    doLast {
        println "Data import into db finished."
    }
}

task transformAndPub(type: Db2Db, dependsOn: dbImport){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('stall.sql', 'afu_igel_pub_v1.igel_stall', true),
            new TransferSet('standort.sql', 'afu_igel_pub_v1.igel_standort', true)
    ];
}

task refreshSolr(type:Exec) {
    mustRunAfter 'transformAndPub'
	commandLine 'curl', '-i', '--max-time', '10', solrIndexupdaterBaseUrl +
        '/queue?ds=ch.so.afu.gewaesserschutz_lw.stall,ch.so.afu.gewaesserschutz_lw.standort_mit_erhebung,ch.so.afu.gewaesserschutz_lw.standort_ohne_erhebung'
}

task updateSearchIndex_1(type: SqlExecutor){
    mustRunAfter 'transformAndPub'
    def layerName = 'ch.so.afu.gewaesserschutz_lw.stall'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
}

task updateSearchIndex_2(type: SqlExecutor){
    mustRunAfter 'transformAndPub'
    def layerName = 'ch.so.afu.gewaesserschutz_lw.standort_mit_erhebung'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
}

task updateSearchIndex_3(type: SqlExecutor){
    mustRunAfter 'transformAndPub'
    def layerName = 'ch.so.afu.gewaesserschutz_lw.standort_ohne_erhebung'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
}
