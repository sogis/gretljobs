import ch.so.agi.gretl.tasks.*

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'replaceDataset'

// Extrahiere den "datasetname" aus dem Dateinamen. Der Dateiname muss gemäss
// folgendem Muster zusammengesetzt sein (analog z.B. zu oereb-db):
// {AMT}.{BFSNR | beliebige Beschreibung für Perimeter}_{Suffix nicht berücksichtigt}.xtf
def datasetname = xtfFilename.findAll("^[a-zA-Z]{3,4}\\.[a-zA-Z0-9]+")[0]

/**
 * Validiere zuerst die Daten.
 */
task validateImportFile(type: IliValidator) {
    description = "Validiere die Import Datei"
    dataFiles = [ file(xtfFilename) ]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir

    doFirst {
        // Stelle sicher, dass der "datasetname" nicht null ist. So kann eine
        // spätere Exception beim Ili2pgReplace Task verhindert werden.
        if(!datasetname) {
            throw new GradleException("Could not extract dataset from filename <" + xtfFilename + ">")
        }
    }
}

/**
 * Importiere oder ersetze (falls bereits vorhanden) das Dataset mit den neuen
 * Daten
 */
task replaceDataset(type: Ili2pgReplace) {
    dependsOn validateImportFile
    description = 'Import das XTF (Herkunft von Planungsbüros) einer Gemeinde in das Schema "afu_schutzbauten_v1".'
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'afu_schutzbauten_v1'
    models = 'SO_AFU_Schutzbauten_20231212'
    deleteData= true
    dataset = datasetname
    dataFile = xtfFilename
    doFirst {
        // Schreibe den "datasetname" in die Ausgabe
        println "Info: datasetname <" + datasetname + ">"
    }
}
