import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'postprocessing_import'

def DB_Schema_QRcat = "afu_qrcat_v1"

task "clean_qrcat_before_import"(type: SqlExecutor) {
    description = "QRcat Daten in der richtigen Reihenfolge (dependencies) löschen vor dem Neuimport"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['delete_qrcat.sql']
}

task "transfer_qrcat"(type: Db2Db,dependsOn: "clean_qrcat_before_import"){
    description = "Migration QRcat-Daten aus alter 'sogis' PostgreSQL-Datenbank"
    sourceDb = ['jdbc:postgresql://geodb.verw.rootso.org/sogis', dbUserSogis, dbPwdSogis]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
            new TransferSet('qrcat_detailszenario_grundhaeufigkeit.sql', 'afu_qrcat_v1.qrcat_detailszenario_grundhaeufigkeit', false),
            new TransferSet('qrcat_toxreferenzszenario.sql', 'afu_qrcat_v1.qrcat_toxreferenzszenario', false),
            new TransferSet('qrcat_fwert.sql', 'afu_qrcat_v1.qrcat_fwert', false),
            new TransferSet('qrcat_szenario.sql', 'afu_qrcat_v1.qrcat_szenario', true)
    ];
}

task "postprocessing_import"(type: SqlExecutor,dependsOn: "transfer_qrcat") {
    description = "Referenzen richtig setzen und Dummy-Records aufräumen"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['qrcat_postprocessing_referenzen.sql','qrcat_postprocessing_remove_bemerkungen.sql']
}
