import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download



apply plugin: "de.undercouch.download"
apply plugin: 'ch.so.agi.gretl'


defaultTasks 'transferDataToEditDb'

def nameOfZipWithBoundaries = 'INTERLIS_2_LV95_LN02.zip'
def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
def pathToDataZip = Paths.get(pathToTempFolder, "data.zip")
def pathToZipWithBoundaries = Paths.get(pathToUnzipFolder.toString(), nameOfZipWithBoundaries)
def xtfFilePath = Paths.get(pathToUnzipFolder.toString(),'INTERLIS_2_LV95_LN02','swissBOUNDARIES3D_1_3.xtf')


task download(type: Download){
    description = "Download swissBoundaries3D from swisstopo"
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }
    src 'https://data.geo.admin.ch/ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill/data.zip'
    dest pathToTempFolder
    overwrite true
}


task unzipData(type: Copy, dependsOn: 'download'){
    description = "Unzip Data.zip."
    doLast {
        println "File unzipped to directory: " + pathToUnzipFolder
    }
    from zipTree(file(pathToDataZip))
    into pathToUnzipFolder
    include nameOfZipWithBoundaries
}


task unzipSwissBoundaries3D(type: Copy, dependsOn: 'unzipData'){
    description = "Unzip swissBOUNDARIES3D_ili2_LV95_V1_3.itf from swissBOUNDARIES3D.zip."
    doLast {
        println "File unzipped to directory: " + pathToUnzipFolder
    }
    from zipTree(pathToZipWithBoundaries)
    into file(pathToUnzipFolder)
    include "**/*.xtf"
}


task dbImport(type: Ili2pgImport, dependsOn: 'unzipSwissBoundaries3D'){
    description = "Import swissBoundaries3D-Data into database"
    doLast {
        println "Data imported into db: " + dbUriSogis
    }
    database = [dbUriSogis, dbUserSogis, dbPwdSogis]
    dbschema = "agi_swissboundaries3d"
    models = "swissBOUNDARIES3D_ili2_LV95_V1_3"
    disableValidation = false
    dataFile = file(xtfFilePath)
    deleteData = true
    strokeArcs = true

    finalizedBy 'removeFiles'
}


task convertData(type: Db2Db, dependsOn: 'dbImport'){
    description = "Convert swissBoundaries3D-Data"
    doLast {
        println "SwissBoundaries3D-Data are converted."
    }

    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = sourceDb
    transferSets = [
            new TransferSet('agi_swissboundaries3d_pub_sogis_swissboundaries3d_bezirk.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_bezirk', true),
            new TransferSet('agi_swissboundaries3d_pub_sogis_swissboundaries3d_hoheitsgebiet.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_hoheitsgebiet', true),
            new TransferSet('agi_swissboundaries3d_pub_sogis_swissboundaries3d_kanton.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_kanton', true),
            new TransferSet('agi_swissboundaries3d_pub_sogis_swissboundaries3d_land.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_land', true)
    ]
}


task removeFiles(type: Delete) {
    description = "Remove Files"
    doLast {
        println "Files removed."
    }
    delete file(pathToUnzipFolder), file(pathToDataZip)
}

task transferDataToPubDb(type: Db2Db, dependsOn: 'convertData'){
    description = "Transfer swissBoundaries3D-Data to pub-DB"
    doLast {
        println "SwissBoundaries3D-Data are transfered."
    }

    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_bezirk.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_bezirk', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_hoheitsgebiet.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_hoheitsgebiet', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_kanton.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_kanton', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_land.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_land', true)
    ]
}

task transferDataToEditDb(type: Db2Db, dependsOn: 'transferDataToPubDb'){
    description = "Transfer swissBoundaries3D-Data to edit-DB"
    doLast {
        println "SwissBoundaries3D-Data are transfered to edit."
    }

    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_bezirk.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_bezirk', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_hoheitsgebiet.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_hoheitsgebiet', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_kanton.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_kanton', true),
            new TransferSet('agi_swissboundaries3d_pub_pub_swissboundaries3d_land.sql',
                    'agi_swissboundaries3d_pub.swissboundaries3d_land', true)
    ]
}


