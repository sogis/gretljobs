import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'


defaultTasks 'publishPub'


task publishEdit(type: Publisher){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dataIdent = "ch.so.afu.baugrundklassen.relational"
    dbSchema = "afu_baugrundklassen_v1"
    modelsToPublish = "SO_AFU_Baugrundklassen_20201023"
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task transferAfuBaugrundklassenPub(type: Db2Db, dependsOn: 'publishEdit') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('afu_baugrundklassen_pub.sql','afu_baugrundklassen_pub_v1.baugrundklasse', true)
    ];
}

task publishPub(type: Publisher, dependsOn: 'transferAfuBaugrundklassenPub'){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.afu.baugrundklassen"
    dbSchema = "afu_baugrundklassen_pub_v1"
    modelsToPublish = "SO_AFU_Baugrundklassen_Publikation_20201023"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
