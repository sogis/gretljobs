import java.nio.file.Paths
import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import de.undercouch.gradle.tasks.download.Download

apply plugin: 'ch.so.agi.gretl'
apply plugin: 'de.undercouch.download'

defaultTasks 'transferData'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def zipFileName = "so.zip"
def zipFile = Paths.get(pathToTempFolder, zipFileName).toFile()
def sqliteFile = Paths.get(pathToTempFolder, "data.sqlite")
def dbUriGwr = "jdbc:sqlite:"+sqliteFile.toFile().getAbsolutePath()  

def iliModelName = "";

tasks.register('downloadFile', Download) {
    src "https://public.madd.bfs.admin.ch/$zipFileName"
    dest zipFile
    overwrite true

    doLast {
        println("File downloaded: " + zipFile.getAbsolutePath())
    }
}

tasks.register('unzipFile', Copy) {
    dependsOn 'downloadFile'
    from zipTree(zipFile)
    into file(pathToTempFolder)
    include "**/data.sqlite"

    doLast {
        println("Unzip file into: " + pathToTempFolder)
    }
}

tasks.register('importData', Db2Db) {
    dependsOn 'unzipFile'
    sourceDb = [dbUriGwr]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
        new TransferSet('import_data_buildings.sql', 'agi_gwr_v1.gwr_gebaeude', true),
        new TransferSet('import_data_dwellings.sql', 'agi_gwr_v1.gwr_wohnung', true),
        new TransferSet('import_data_codes.sql', 'agi_gwr_v1.gwr_codes', true)
    ];
}

tasks.register('transferData', Db2Db) {
    dependsOn 'importData'
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('transfer_gebaeude.sql', 'agi_gwr_pub_v1.gwr_gebaeude', true),
        new TransferSet('transfer_wohnung.sql', 'agi_gwr_pub_v1.gwr_wohnung', true)
    ];
}

// TODO
// Publisher. ili2pg-Export und Validierung ging je circa 1 Minute und fehlerfrei.

