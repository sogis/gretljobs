import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'publipub'

/*
task transferArpRichtplanPubSogis(type: Db2Db) {
    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_richtplan_pub_richtplankarte_grundnutzung_sogis.sql',
                    'arp_richtplan_pub_v1.richtplankarte_grundnutzung', true),
            new TransferSet('arp_richtplan_pub_richtplankarte_ueberlagernde_flaeche_sogis.sql',
                    'arp_richtplan_pub_v1.richtplankarte_ueberlagernde_flaeche', true)
    ]
}

task publiedit(type: Publisher, dependsOn: 'transferArpRichtplanPubSogis'){
  dataIdent = "ch.so.arp.richtplan.relational"
  database = [dbUriEdit,dbUserEdit,dbPwdEdit]
  dbSchema = "arp_richtplan_v1"
  modelsToPublish = "SO_ARP_Richtplan_20220630"

  target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
  kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
  kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
  grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
  if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task transferArpRichtplanPubEdit(type: Db2Db, dependsOn: 'publiedit') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_richtplan_pub_detailkarten_ueberlagernder_Punkt.sql',
                    'arp_richtplan_pub_v1.detailkarten_ueberlagernder_punkt', true),
            new TransferSet('arp_richtplan_pub_detailkarten_ueberlagernde_Linie.sql',
                    'arp_richtplan_pub_v1.detailkarten_ueberlagernde_linie', true),
            new TransferSet('arp_richtplan_pub_detailkarten_ueberlagernde_Flaeche.sql',
                    'arp_richtplan_pub_v1.detailkarten_ueberlagernde_flaeche', true),
            new TransferSet('arp_richtplan_pub_richtplankarte_ueberlagernder_punkt.sql',
                    'arp_richtplan_pub_v1.richtplankarte_ueberlagernder_punkt', true),
            new TransferSet('arp_richtplan_pub_richtplankarte_ueberlagernde_linie.sql',
                    'arp_richtplan_pub_v1.richtplankarte_ueberlagernde_linie', true),
            new TransferSet('arp_richtplan_pub_richtplankarte_grundnutzung.sql',
                    'arp_richtplan_pub_v1.richtplankarte_grundnutzung', false),
            new TransferSet('arp_richtplan_pub_richtplankarte_ueberlagernde_flaeche.sql',
                    'arp_richtplan_pub_v1.richtplankarte_ueberlagernde_flaeche', false)
    ]
}


task addArpRichtplanPubDocuments(type: SqlExecutor, dependsOn: 'transferArpRichtplanPubEdit') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ['arp_richtplan_pub_add_documents.sql']
}
task publipub(type: Publisher, dependsOn: 'addArpRichtplanPubDocuments'){
*/

task publipub(type: Publisher){
  dataIdent = "ch.so.arp.richtplan"
  userFormats = true
  database = [dbUriPub,dbUserPub,dbPwdPub]
  dbSchema = "arp_richtplan_pub_v1"
  modelsToPublish = "SO_ARP_Richtplan_Publikation_20220630"

  target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
  kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
  kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
  grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
  if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir

}

