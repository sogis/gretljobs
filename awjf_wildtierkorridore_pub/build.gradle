import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'publipub'

task transferAwjfWildtierkorridorePub(type: Db2Db) {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('awjf_wildbarriere_flaechen_pub.sql', 'awjf_wildtierkorridore_pub_v1.wildbarriere_flaeche', true),
            new TransferSet('awjf_wildbarriere_linien_pub.sql', 'awjf_wildtierkorridore_pub_v1.wildbarriere_linie', true),
            new TransferSet('awjf_wildstrukturen_pub.sql', 'awjf_wildtierkorridore_pub_v1.wildstruktur', true),
            new TransferSet('awjf_wildtierkorridore_pub.sql', 'awjf_wildtierkorridore_pub_v1.wildtierkorridor', true)
    ];
}

task publipub(type: Publisher, dependsOn:'transferAwjfWildtierkorridorePub'){
    dataIdent = "ch.so.awjf.wildtierkorridore"
    userFormats = true

    database = [dbUriPub,dbUserPub,dbPwdPub]
    dbSchema = "awjf_wildtierkorridore_pub_v1"
    modelsToPublish = "SO_AWJF_Wildtierkorridore_20210831"

    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
