import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.util.TaskUtil
import java.nio.file.Paths
import java.nio.file.Files
import java.io.FileOutputStream
import org.apache.commons.net.ftp.*

apply plugin: 'ch.so.agi.gretl'

defaultTasks "publishPub"

def pathToTempFolder = Files.createTempDirectory("arpfledermaus-").toFile().getAbsolutePath()


task downloadData(type: FtpDownload){
    server = ftpServerFledermaus
    user = ftpUserFledermaus
    password = ftpPwdFledermaus
    localDir = pathToTempFolder
    remoteDir = ""
    remoteFile = "export.csv"
}

task validateCsv(type: CsvValidator, dependsOn: 'downloadData') {
    models = "SO_ARP_Fledermausfundorte_20200728"
    firstLineIsHeader = true
    dataFiles = [pathToTempFolder.toString()+"/export.csv"]
}


task truncateTable(type: SqlExecutor, dependsOn: 'validateCsv') {
    description = "Leert die Tabelle arp_fledermaus.fledermausfundrte_fledermausfundort"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = [
            'truncate_table.sql'
    ]
}

task importCsv(type: CsvImport, dependsOn: 'truncateTable') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "arp_fledermaus_v1"
    tableName = "fledermausfundrte_fledermausfundort"
    firstLineIsHeader = true
    valueSeparator = ","
    encoding = "UTF-8"
    dataFile = file(pathToTempFolder.toString()+"/export.csv")
}

task transferFledermausPub(type: Db2Db, dependsOn: 'importCsv') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_fledermaus_pub.sql', 'arp_fledermaus_pub_v1.fledermausfundrte_fledermausfundort', true)
    ];
}

task publishPub(type: Publisher, dependsOn: 'transferFledermausPub'){
    database = [dbUriPub,dbUserPub,dbPwdPub]
    dataIdent = "ch.so.arp.fledermausfundorte"
    dbSchema = "arp_fledermaus_pub_v1"
    modelsToPublish = "SO_ARP_Fledermausfundorte_Publikation_20200806"
    userFormats = true
    target = ["sftp://$sftpServerSogis/$sftpUserSogis", sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
