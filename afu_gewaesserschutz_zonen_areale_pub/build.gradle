import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths

apply plugin: 'ch.so.agi.gretl'

// defaultTasks 'validateData', 'deleteData_staging_pub', 'uploadXtf'
                                                                                                                defaultTasks 'validateData', 'deleteData_staging_pub'

def fileName = "afu_gewaesserschutz_zonen_areale.xtf"
def fileNameZip = "afu_gewaesserschutz_zonen_areale.zip"
def fileNamePub = "afu_gewaesserschutz_zonen_areale_pub.xtf"

def aiLogin = aiUser + ":" + aiPwd

task exportDataEdit (type: Ili2pgExport) {
    description = "Exportiert die Daten aus dem Schema afu_grundwasserschutz_zonen_areale in eine INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'afu_gewaesserschutz_zonen_areale_v1'
    models = 'PlanerischerGewaesserschutz_LV95_V1_1'
    dataFile= file(fileName)
    disableValidation = true
}

task validateDataEdit(type: IliValidator, dependsOn: 'exportDataEdit') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(fileName)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task transferGewaesserschutz_staging(type: Db2Db, dependsOn: 'validateDataEdit') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('gewaesserschutz_schutzzone_staging.sql', 'afu_gewaesserschutz_staging_v1.gewaesserschutz_schutzzone', true),
            new TransferSet('gewaesserschutz_schutzareal_staging.sql', 'afu_gewaesserschutz_staging_v1.gewaesserschutz_schutzareal', true),
    ];
}

task exportData (type: Ili2pgExport, dependsOn: 'transferGewaesserschutz_staging') {
    description = "Exportiert die umgebauten Daten aus dem Schema afu_gewaesserschutz_staging in ein INTERLIS-Datei."
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'afu_gewaesserschutz_staging_v1'
    models = 'SO_AfU_Gewaesserschutz_Publikation_20220817'
    dataFile= file(fileNamePub)
    disableValidation = true
}

task validateData(type: IliValidator, dependsOn: 'exportData') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(fileNamePub)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task transferGewaesserschutz_pub(type: Db2Db, dependsOn: 'validateData') {
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('gewaesserschutz_schutzzone.sql', 'afu_gewaesserschutz_pub_v1.gewaesserschutz_schutzzone', true),
            new TransferSet('gewaesserschutz_schutzareal.sql', 'afu_gewaesserschutz_pub_v1.gewaesserschutz_schutzareal', true),
    ];
}

task publishPub(type: Publisher, dependsOn: 'transferGewaesserschutz_pub'){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.afu.gewaesserschutz.zonen_areale"
    dbSchema = "afu_gewaesserschutz_pub_v1"
    modelsToPublish = "SO_AfU_Gewaesserschutz_Publikation_20220817"
    userFormats = true
    target = ["sftp://$sftpServerSogis/$sftpUserSogis", sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task zipXtf(type: Zip, dependsOn: 'transferGewaesserschutz_pub'){
    from "."
    include fileName
    archiveName fileNameZip
    destinationDir(file("."))
}

/* Falls man auf geodienste.ch alles löschen will/muss (siehe zweiter Abschnitt), muss man
* einmalig replace_all=true setzen. Curl-Befehl kann natürlich auch lokal
* ausgeführt werden.
*
* Achtung: Die Dateinamen müssen immer gleich sein. Diese werden als 
* dataset-Name verwendet. Will man die Namen ändern, siehe erster Abschnitt
* des Kommentars.
*/
task uploadXtf(dependsOn: 'zipXtf') {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=planerischer_gewaesserschutz", "-F",
                        "lv95_file=@" + Paths.get(".", fileNameZip), "-F", "publish=true", "-F", "replace_all=false",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }
    }
}


task deleteData_staging_pub (type: SqlExecutor, dependsOn: 'transferGewaesserschutz_pub') {
    description = "Löscht/leert die Daten aus dem Schema afu_gewaesserschutz_staging"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_afu_gewaesserschutz_staging.sql"]
}
