/*
Pushes the afu hazard data (model SO_AfU_Gefahrenkartierung) to the KKGEO AI.
Process:
1. Transform the data from model SO_AfU_Gefahrenkartierung into bafu model Hazard_Mapping using GRETL sql
2. Create the *.xtf with the ili2pg GRETL task
3. Push the xtf to the KKGEO AI

Class mapping between the models:
- Erhebungsgebiet --> assessment_area
- GK_MGDM --> hazard_area
- IK_synoptisch_MGDM --> synoptic_intensity

Go on: 
- Dann zip task
*/

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

import java.nio.file.Files
import java.nio.file.Paths
import java.io.File

defaultTasks 'uploadGefkartMgdm'

/*
1. Transform the data from model SO_AfU_Gefahrenkartierung into bafu model Hazard_Mapping using GRETL sql
*/
task mapGefkart2Mgdm(type: Db2Db){
    sourceDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    targetDb = [dbUriSogis, dbUserSogis, dbPwdSogis]
    transferSets = [
		//new TransferSet('assessment_area.sql', 'afu_gefahrenkartierung_export_ai.hazard_mapping_assessment_area', true)
		new TransferSet('hazard_area.sql', 'afu_gefahrenkartierung_export_ai.hazard_mapping_hazard_area', true)
		//,new TransferSet('synoptic_intensity.sql', 'afu_gefahrenkartierung_export_ai.hazard_mapping_synoptic_intensity', true)
	];        
}

/*
2. Create the *.xtf with the ili2pg GRETL task
*/
def zipContentDir = file('/home/gradle/project/tmp/gefkart/zipcontent')
def tmpDir = zipContentDir.getParentFile()

def loggingFile = file(Paths.get(tmpDir.toString(), "gretl_gefkart_log.log"))
def exportFileName = 'gretl_gefkart_data.xtf'
def exportFile = file(Paths.get(zipContentDir.toString(), exportFileName))

task exportGefkartMgdm(type: Ili2pgExport, dependsOn: 'mapGefkart2Mgdm') {
    description = "Exportiert die ins Gefahrenkartierungs-MGDM umgebauten Daten in ein xtf-File."
    database = [dbUriSogis, dbUserSogis, dbPwdSogis]
    dbschema = "afu_gefahrenkartierung_export_ai"
    models = "Hazard_Mapping_LV95_V1_2"
    logFile = loggingFile
    dataFile = exportFile
}

/*
3. Package and upload to the KKGEO AI
*/
def zipName = 'gefkart_export.zip'

task zipGefkartMgdm(type: Zip, dependsOn: 'exportGefkartMgdm'){
    description = "Zipt das xtf-File mit den Gefahrenkartierungsdaten (MGDM vom Bund) für den Upload in die " +
            "Aggregationsinfrastruktur."
    archiveName zipName
    destinationDir tmpDir
            
    from zipContentDir
}

//def aiLogin = aiUser + ":" + aiPwd
def aiLogin = 'geodienste_so:ee4Aipai';
def aiServer = 'www-integration.geodienste.ch'
def serverUrl = "https://" + aiServer + "/data_agg/interlis/import"
def zipFile = new File(tmpDir, zipName)

task uploadGefkartMgdm(dependsOn: zipGefkartMgdm) {
    description = "Lädt die Gefahrenkartierungsdaten (MGDM vom Bund) in die Aggregationsinfrastruktur hoch."
    doLast {
        println "Groesse der hochzuladenden Dateien (byte). XTF unkomprimiert: " + exportFile.length() + " ZIP: " + zipFile.length()
        def response = ["curl", "-u", aiLogin, "-F", "topic=gefahrenkarten", "-F",
                        "lv95_file=@" + zipFile, "-F", "publish=true", serverUrl
                        ].execute().text
        println(response)
    }
}




