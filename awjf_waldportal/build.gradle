import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import de.undercouch.gradle.tasks.download.Download
import java.text.SimpleDateFormat
import java.util.zip.ZipInputStream
import java.util.zip.ZipEntry
import java.nio.file.Paths

apply plugin: 'ch.so.agi.gretl'
apply plugin: 'org.hidetake.ssh'

defaultTasks 'importWaldportal', 'importWaldportalPub'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
ext.filename = 'bar'

/////////////////////////////////////////////////
//Konfiguration
def zipFileName = 'wpexport_so_latest.zip'
def xtfFileName = 'SO_awjf_waldportal_prod.xtf'
def umgebung = "prod/"
////////////////////////////////////////////////

// Credentials f√ºr den SFTP-Server
remotes {
    sftpServer {
        host = ftpServerWaldportal
        user = ftpUserWaldportal
        password = ftpPwdWaldportal
    }
}

//Download-Task
task download () {
    description = "Download file from SFTP server"
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }
        ssh.run {
            session(remotes.sftpServer) {
                get from: umgebung+zipFileName, into: pathToTempFolder
            }
        }
        println "File downloaded from SFTP server"
    }
}

task unpackFile(type: Copy, dependsOn: download) {
    def zipFile = file(pathToTempFolder+"/"+zipFileName)
    def outputDir = file(pathToTempFolder)
 
    from zipTree(zipFile)
    into outputDir
}

task importWaldportal(type: Ili2pgImport, dependsOn: unpackFile) {
    description = 'Import einmal in der Woche die Waldportal-Daten in der Erfassungsdatenbank'
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "awjf_waldportal_v1"
    models = 'SO_AWJF_Waldportal_20230719'
    dataFile = Paths.get(pathToTempFolder, xtfFileName)
    deleteData = true
}

task publish (type: Publisher, dependsOn: importWaldportal){
    dataIdent = "ch.so.awjf.waldmassnahmen_objekte"

    database = [dbUriEdit,dbUserEdit,dbPwdEdit]
    dbSchema = "awjf_waldportal_v1"
    modelsToPublish = 'SO_AWJF_Waldportal_20230719'
    userFormats = true
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(rootDir).getParentFile(), "publisher_grooming.json")
}

task importWaldportalPub(type: Ili2pgImport, dependsOn: publish) {
    description = 'Import einmal in der Woche die Waldportal-Daten in der Publikationsdatenbank'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = "awjf_waldportal_pub_v1"
    models = 'SO_AWJF_Waldportal_20230719'
    dataFile = Paths.get(pathToTempFolder, xtfFileName)
    deleteData = true
}
