import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'transferData', 'uploadMgdmNetzgebiete'

def pathToTempFolder = System.getProperty("java.io.tmpdir")

def mgdmNetzgebieteXtfFileName = "ch.so.awa.stromversorgungssicherheit_netzgebiete.mgdm.xtf"
def mgdmNetzgebieteZipFileName = "ch.so.awa.stromversorgungssicherheit_netzgebiete.mgdm.zip"

def aiLogin = aiUser + ":" + aiPwd

/**
 * Validiere vorgängig die Daten in der Erfassungs-Datenbank. Da die Daten
 * direkt in der Erfassungs-Datenbank bearbeitet werden, muss geprüft werden,
 * ob die Daten aktuell in einem validen Zustand sind.
 */ 
task validateData(type: Ili2pgValidate){
    description = "Validiere die Daten im Modell SO_AGI_LK_Netzgebiete_20241015"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = "SO_AGI_LK_Netzgebiete_20241015"
    dbschema = "agi_lk_netzgebiete_v1"
}

/**
 * Baue die Daten aus der Erfassungs-Datenbank in die Publikations-Datenbank.
 * um.
 */
task transferData(type: Db2Db) {
    dependsOn "validateData"
    description = "Baue die Daten vom Erfassungsmodell ins Publikationsmodell um"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('select_netzgebiete.sql',
                        'agi_lk_netzgebiete_pub_v1.netzgebiet',
                        true)
    ];
}

/**
 * Publiziere die Daten auf unserer Datenabgabe
 */
task publishData(type: Publisher){
    dependsOn "transferData"
    description = "Publiziere die Daten"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.agi.lk.netzgebiete"
    dbSchema = "agi_lk_netzgebiete_pub_v1"
    modelsToPublish = "SO_AGI_LK_Netzgebiete_Publikation_20241015"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

/**
 * Baue die Daten zusätzlich ins MGDM um und schicke die Daten an geodienste.ch
 */
task transferDataToMgdm(type: SqlExecutor) {
    dependsOn "transferData"
    description "Datenumbau ins MGDM"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['insert_into_mgdm.sql']
}


task exportMgdmNetzgebiete(type: Ili2pgExport) {
    dependsOn "transferDataToMgdm"
    description "Exportiere die Daten in eine INTERLIS Datei ohne Validierung"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = "SupplySecurity_RuledAreas_V1_2"
    dbschema = "awa_stromversorgungssicherheit_mgdm_v1"
    dataFile = file(mgdmNetzgebieteXtfFileName)
    disableValidation = true
}

task validateMgdmNetzgebiete(type: IliValidator) {
    dependsOn "exportMgdmNetzgebiete"
    dataFiles = [file(mgdmNetzgebieteXtfFileName)]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    logFile = "ilivalidator.log"
    failOnError = true
}

task zipMgdmNetzgebiete(type: Zip, ){
    dependsOn "validateMgdmNetzgebiete"
    from pathToTempFolder
    from "."
    include mgdmNetzgebieteXtfFileName
    archiveName mgdmNetzgebieteZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmNetzgebiete() {
    dependsOn "zipMgdmNetzgebiete"
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=stromversorgungssicherheit_netzgebiete_v1_2", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmNetzgebieteZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }
    }
}