/*
Pushes the afu hazard data (model SO_AfU_Gefahrenkartierung) to the KKGEO AI.
Process:
1. Transform the data from model SO_AfU_Gefahrenkartierung into bafu model Hazard_Mapping using GRETL sql
2. Create the *.xtf with the ili2pg GRETL task
3. Push the xtf to the KKGEO AI

Class mapping between the models:
- Erhebungsgebiet --> assessment_area
- GK_MGDM --> hazard_area
- IK_synoptisch_MGDM --> synoptic_intensity
*/

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

import java.nio.file.Files
import java.nio.file.Paths
import java.io.File

defaultTasks 'uploadGefkartMgdm'

/*
1. Transform the data from model SO_AfU_Gefahrenkartierung into bafu model Hazard_Mapping using GRETL sql
*/
task mapGefkart2Mgdm(type: Db2Db){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
		new TransferSet('assessment_area.sql', 'afu_gefahrenkartierung_mgdm.assessment_area', true),
		new TransferSet('hazard_area.sql', 'afu_gefahrenkartierung_mgdm.hazard_area', true),
		new TransferSet('synoptic_intensity.sql', 'afu_gefahrenkartierung_mgdm.synoptic_intensity', true)
	];        
}

/*
2. Create the *.xtf with the ili2pg GRETL task
*/
def jobTempRoot = 'gefkart'
def zipContentDir = file(Paths.get(gretlShare, jobTempRoot, 'zipcontent'))
def tmpDir = zipContentDir.getParentFile()

def loggingFile = file(Paths.get(tmpDir.toString(), "iliexport.log"))
def exportFileName = 'iliexport.xtf'
def exportFile = file(Paths.get(zipContentDir.toString(), exportFileName))

task exportGefkartMgdm(type: Ili2pgExport, dependsOn: 'mapGefkart2Mgdm') {
    description = "Exportiert die ins Gefahrenkartierungs-MGDM umgebauten Daten in ein xtf-File."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "afu_gefahrenkartierung_mgdm"
    models = "Hazard_Mapping_LV95_V1_2"
    logFile = loggingFile
    dataFile = exportFile
}

/*
3. Package and upload to the KKGEO AI
*/
def zipName = 'iliexport.zip'

task zipGefkartMgdm(type: Zip, dependsOn: 'exportGefkartMgdm'){
    description = "Zipt das xtf-File mit den Gefahrenkartierungsdaten (MGDM vom Bund) für den Upload in die " +
            "Aggregationsinfrastruktur."
    archiveName zipName
    destinationDir tmpDir
            
    from zipContentDir
}

task uploadGefkartMgdm (dependsOn: zipGefkartMgdm) {
    description = "Lädt die Gefahrenkartierungsdaten (MGDM vom Bund) in die Aggregationsinfrastruktur hoch."

    def aiLogin = aiUser + ":" + aiPwd
    def serverUrl = "https://" + aiServer + "/data_agg/interlis/import"
    def zipFile = new File(tmpDir, zipName)

    def file_kb = Math.round(exportFile.length() / 1000.0)
    def zip_kb = Math.round(zipFile.length() / 1000.0)

    doLast {
        println "Groesse der hochzuladenden Dateien (kb). XTF unkomprimiert: " + file_kb + " ZIP: " + zip_kb
        def response = ["curl", "-u", aiLogin, "-F", "topic=gefahrenkarten", "-F",
                        "lv95_file=@" + zipFile, "-F", "publish=true", serverUrl
                        ].execute().text
        println(response)
    }
}

task removeShare(type: Delete, dependsOn: uploadGefkartMgdm){
    description = "Entfernt das Verzeichnis [jobTempRoot] aus dem gretl share"
    delete tmpDir
}




