pipeline {
    agent { label env.NODE_LABEL ?: 'gretl' }

    options {
        timeout(time: 6, unit: 'HOURS')
    }
    parameters {
        booleanParam(defaultValue: false,
                description: 'Update entire feature search index: complete rebuild of the feature search index',
                name: 'UPDATE_FEATURES'
        )

        // TODO: Parameter needed for toggling DELETION of the entire feature search index
        // choice(name: 'UPDATE_FEATURES', choices: ['NO', 'UPDATE', 'DELETE_UPDATE'], description: 'Update entire feature search index: complete rebuild of the feature search index')

        string(name: 'TASK_NAME', defaultValue: 'updateSearchIndex', description: 'Name of the GRETL task to be started to rebuild the feature search index')

        booleanParam(defaultValue: false,
                description: 'Update only feature search index for filtered job: partial rebuild of the feature search index',
                name: 'JOB_FILTER'
        )

        string(name: 'JOB_FILTER_NAME', defaultValue: 'ada_archaeologie_pub', description: 'Name of the GRETL job(s) to be started to rebuild the feature search index. It is possible to provide wildcards, like afu_*')
    }

    stages {
        stage('git checkout'){
            when { expression { params.UPDATE_FEATURES } }
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
            }
        }
        stage('UPDATE FEATURES: Find and Execute Tasks') {
            when { expression { params.UPDATE_FEATURES } }
            steps {
                container('gretl') {
                    script {
                        def taskToRun = params.TASK_NAME.trim()
                        def gradleCommand = 'gretl'         //gradle command in der GRETL-Umgebung
                        def gradleProjects = []

                        echo "Suche nach GRETL-Jobs mit Task: ${taskToRun}"
                        if (params.JOB_FILTER){
                            def rawName = params.JOB_FILTER_NAME.trim()
                            //verhindere Path Traversal
                            def cleanedName = rawName.replaceAll(/^([.]{1,2}\/)+|^\/+/, "")

                            echo "Suche in GRETL-Job mit Namen: ${cleanedName}"
                            gradleProjects = findFiles(glob: "${cleanedName}/*.gradle").toList().unique()
                            echo "  Gefundene potentielle GRETL-Jobs: ${gradleProjects.size()}"
                        }
                        else {
                            // Alle build.gradle Dateien finden
                            echo "Suche in allen GRETL-Jobs"
                            gradleProjects = findFiles(glob: "*/*.gradle").toList().unique()
                            echo "  Gefundene potentielle GRETL-Jobs: ${gradleProjects.size()}"
                        }

                        // Statistik
                        def jobsFound = 0
                        def jobsErrors = 0
                        def tasksFound = 0
                        def tasksExecuted = 0

                        // Jeden GRETL-Job verarbeiten
                        gradleProjects.each { project ->
                            def projectPath = project.path
                            def projectDir = projectPath.substring(0, projectPath.lastIndexOf('/'))

                            def isSettingsGradle = projectPath.contains("settings.gradle")

                            //echo "Pr√ºfe GRETL-Job in: ${projectDir}"

                            //listen to build abort signals while looping
                            sleep(time: 10, unit: 'MILLISECONDS')

                            try {

                                if (isSettingsGradle){
                                    echo '__________________________________________________________'
                                    echo "üîé Pr√ºfe Multi-Project-Build in ${projectDir}"
                                }
                                else{
                                    // Inhalt der build.gradle Datei lesen
                                    def buildFileContent = readFile(file: projectPath)

                                    // Textsuche nach Task-Definitionen
                                    def containsTask = (buildFileContent =~ /${taskToRun}/).find()

                                    if (containsTask) {
                                        echo '__________________________________________________________'
                                        echo "üîé Task(s) vom Typ '${taskToRun}' in ${projectDir} gefunden"
                                    }
                                    else{
                                        // √úberspringen des Projects, wenn kein Task gefunden werden kann
                                        return
                                    }
                                }

                                // Extrahieren der Default-Tasks
                                def defaultTasks = []
                                def defaultTaskLine = ""
                                def taskOutput = ""

                                dir(projectDir){
                                    echo "üó∫Ô∏è Default-Tasks abfragen"
                                    // F√ºhrt 'gretl tasks' aus und speichert die Ausgabe
                                    taskOutput = sh(script: "${gradleCommand} tasks", returnStdout: true).trim()
                                }

                                //listen to build abort signals while looping
                                sleep(time: 10, unit: 'MILLISECONDS')

                                taskOutput.readLines().each { line ->
                                    if (line.trim().startsWith("Default tasks:")) {
                                        defaultTaskLine = line.trim()
                                    }
                                }
                                if (defaultTaskLine) {
                                    // Entferne "Default tasks: " vom Beginn der Zeile
                                    def tasksString = defaultTaskLine.replace("Default tasks:", "").trim()
                                    // Teile den String an Kommas
                                    defaultTasks = tasksString.split(",").collect { it.trim() }
                                }
                                else{
                                    echo "‚ùå Default-Tasks nicht verf√ºgbar in ${projectDir}"
                                    currentBuild.result = 'FAILED'
                                    return
                                }
                                echo "Gefundene Default-Tasks: ${defaultTasks.join(', ')}"

                                // Parameter f√ºr den zu suchenden Task-Namen
                                def targetTaskName = params.TASK_NAME ?: ""

                                // Suchen nach Default-Tasks, die dem Namen entsprechen oder ihn enthalten
                                def matchingTasks = []
                                if (targetTaskName) {
                                    matchingTasks = defaultTasks.findAll { it.contains(targetTaskName) }
                                }

                                if (matchingTasks.isEmpty()) {
                                    echo "Keine Default-Tasks gefunden, die '${targetTaskName}' enthalten."
                                } else {
                                    echo "Gefundene passende Default-Tasks: ${matchingTasks.join(', ')}"
                                    jobsFound++
                                    tasksFound += matchingTasks.size()

                                    //echo "F√ºhre alle passenden Default-Tasks aus"
                                    try {
                                        dir(projectDir){
                                            echo "üöÄ Start!"
                                            def gradleOutput = sh "${gradleCommand} ${matchingTasks.join(' ')} --console=plain"
                                            echo gradleOutput
                                        }
                                        tasksExecuted += matchingTasks.size()
                                        echo "‚úÖ ${matchingTasks.size()} Task(s) in ${projectDir} erfolgreich ausgef√ºhrt"
                                    } catch (Exception e) {
                                        echo "‚ùå Fehler beim Ausf√ºhren von Task(s) in ${projectDir}: ${e.message}"
                                        currentBuild.result = 'FAILED'
                                    }
                                }

                            } catch (Exception e) {
                                // catch build abort signals
                                if (e instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
                                    echo "‚ùå Build was cancelled: ${e.message}"
                                    throw e  // Re-throw to abort
                                }
                                echo "‚ùå Fehler beim Lesen oder Verarbeiten der build.gradle in ${projectDir}: ${e.message}"
                                jobsErrors++;
                                if (!isSettingsGradle){
                                    currentBuild.result = 'FAILED'
                                }
                            }
                        }

                        // Zusammenfassung ausgeben
                        echo "======= Zusammenfassung ============================"
                        echo "Task-Name: ${taskToRun}"
                        if (params.JOB_FILTER){
                            def rawName = params.JOB_FILTER_NAME.trim()
                            //verhindere Path Traversal
                            def cleanedName = rawName.replaceAll(/^([.]{1,2}\/)+|^\/+/, "")
                            echo "Suche nur GRETL-Jobs mit Namen: ${cleanedName}"
                        }
                        echo "Gefundene GRETL-Jobs: ${gradleProjects.size()}"
                        echo "GRETL-Jobs mit Task '${taskToRun}': ${jobsFound}"
                        echo "  davon fehlerhafte GRETL-Jobs: ${jobsErrors}"
                        echo "Geplante auszuf√ºhrende Tasks:  ${tasksFound}"
                        echo "Erfolgreich ausgef√ºhrte Tasks: ${tasksExecuted}"
                        echo "===================================================="
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                if (params.UPDATE_FEATURES) {
                    echo "‚úÖ Alle gefundenen '${params.TASK_NAME}'-Tasks wurden erfolgreich gestartet."
                }
            }
            echo "‚úÖ‚úÖ GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) abgeschlossen"
        }
        unsuccessful {
            echo "‚ùå‚ùå GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) fehlgeschlagen"
            emailext (
                to: "${currentBuild.getBuildCauses()[0]._class == 'hudson.model.Cause$UserIdCause' ? emailextrecipients([requestor()]) : '$DEFAULT_RECIPIENTS'}",
                subject: "GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) ist fehlgeschlagen",
                body: "Die Ausf√ºhrung des GRETL-Jobs ${JOB_NAME} (${BUILD_DISPLAY_NAME}) war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
    }

}
