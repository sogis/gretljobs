import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.tasks.Curl.MethodType
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Files
import java.nio.file.Paths
import java.io.File

apply plugin: 'ch.so.agi.gretl'


defaultTasks 'validateData', 'uploadPlanregister'

def FileName = "awjf_statische_waldgrenze.xtf"
def FileNamePub = "awjf_statische_waldgrenze_pub.xtf"

def pathToTempFolder = System.getProperty("java.io.tmpdir")

//Für Planregister
def iliModelPlanregister = "SO_Nutzungsplanung_Planregister_Publikation_20221115"
def dbSchemaPlanregister = "arp_nutzungsplanung_planregister_pub_v1"
def planregisterFileBaseName = "ch.so.arp.planregister"
def planregisterXtfFileName = planregisterFileBaseName+".xml"
def planregisterZipFileName = planregisterFileBaseName+".xml.gz"


task publiedit(type: Publisher){
  database = [dbUriEdit, dbUserEdit, dbPwdEdit]
  dataIdent = "ch.so.awjf.statische_waldgrenze.relational"
  dbSchema = "awjf_statische_waldgrenze"
  modelsToPublish = "SO_AWJF_Statische_Waldgrenzen_20191119"
  target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
  kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
  kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
  grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
  if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task exportDataEdit (type: Ili2pgExport, dependsOn: 'publiedit') {
    description = "Exportiert die Daten aus dem Schema awjf_statische_waldgrenze in eine INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'awjf_statische_waldgrenze'
    models = 'SO_AWJF_Statische_Waldgrenzen_20191119'
    dataFile= file(FileName)
    disableValidation = true
}

task validateDataEdit(type: IliValidator, dependsOn: 'exportDataEdit') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileName)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task transferStatischeWaldgrenzen(type: Db2Db, dependsOn: 'validateDataEdit') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('waldgrenze_waldgrenze.sql', 'awjf_statische_waldgrenze_staging_v1.waldgrenze_waldgrenze', true)
    ];
}

task exportData (type: Ili2pgExport, dependsOn: 'transferStatischeWaldgrenzen') {
    description = "Exportiert die umgebauten Daten aus dem Schema awjf_statische_waldgrenze_staging in ein INTERLIS-Datei."
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'awjf_statische_waldgrenze_staging_v1'
    models = 'SO_AWJF_Statische_Waldgrenzen_Publikation_20191119'
    dataFile= file(FileNamePub)
    disableValidation = true
}

task validateData(type: IliValidator, dependsOn: 'exportData') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileNamePub)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task deleteData_staging_pub (type: SqlExecutor) {
    description = "Löscht/leert die Daten aus dem Schema awjf_statische_waldgrenze_staging"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_awjf_statische_waldgrenze_staging.sql"]
}


task importXTF_pub(type: Ili2pgImport) {
    description = 'Import der umgebaute INTERLIS-Datei in das Schema awjf_statische_waldgrenze_pub.'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'awjf_statische_waldgrenze_pub_v1'
    models = 'SO_AWJF_Statische_Waldgrenzen_Publikation_20191119'
    dataFile = file(FileNamePub)
    deleteData = true
    disableValidation = true
    finalizedBy deleteData_staging_pub
}

task publishPub(type: Publisher, dependsOn: 'importXTF_pub'){
    database = [dbUriPub,dbUserPub,dbPwdPub]
    dataIdent = "ch.so.awjf.statische_waldgrenze"
    dbSchema = "awjf_statische_waldgrenze_pub_v1"
    modelsToPublish = "SO_AWJF_Statische_Waldgrenzen_Publikation_20191119"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
// EXPORT Typo3
// Datenumbau für Planregister (Nur Daten aus Schema "awjf_statische_waldgrenze" werden ersetzt) und an Typo3 senden


task deleteData_planregister_pub (type: SqlExecutor, dependsOn: publishPub ) {
    description = "Löscht/leert die Daten aus dem Schema arp_nutzungsplanung_planregister_pub"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_nutzungsplanung_planregister_pub_statische_waldgrenze.sql"]
}

task transfer_planregister_pub(type: Db2Db, dependsOn: 'deleteData_planregister_pub') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_waldgrenze.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false),            
    ];
}

task deleteData_doppelte_dokumente (type: SqlExecutor, dependsOn:transfer_planregister_pub) {
    description = "Löscht die doppelten Dokumente aus dem Schema arp_nutzungsplanung_planregister_pub" 
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_nutzungsplanung_planregister_pub_doppelte_dokumente.sql"]
}

task exportPlanregisterPub(type: Ili2pgExport, dependsOn: 'deleteData_doppelte_dokumente') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    models = iliModelPlanregister
    dbschema = dbSchemaPlanregister
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName))
    disableValidation = true
    // Kein Dataset, weil alle Daten enthalten sein sollen. 
}

task zipPlanregister(type: Gzip, dependsOn: 'exportPlanregisterPub') {
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName)) 
    gzipFile = file(Paths.get(pathToTempFolder, planregisterZipFileName)) 
}

task uploadPlanregister(type: Curl, dependsOn: 'zipPlanregister') {
    serverUrl = digiplanUrl
    method = MethodType.POST
    headers = ["Content-Type": "application/xml", "Content-Encoding": "gzip"]
    dataBinary = file(Paths.get(pathToTempFolder, planregisterZipFileName))
    user = digiplanUser
    password = digiplanPwd
    expectedStatusCode = 202
}

