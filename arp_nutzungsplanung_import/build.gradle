
// Import Daten der Nutzungsplanung pro Gemeinde (dataset=BFS-Nr.) in das Schema "arp_nutzungsplanung_import" und macht ein Datenumbau in die Struktur des Nachführungsmodells (Schema "arp_nutzungsplanung_transfer"). 
// Das resultierende XTF wird ins Schema "arp_nutzungsplanung" importiert. 

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet


apply plugin: 'ch.so.agi.gretl'

task copyXtfFile(type: Copy) {
    from "upload/"
    into "upload/"
    include("uploadFile")
    rename("uploadFile", "${ili2pgDataset}.xtf")
}

task importXtfFile(type: Ili2pgReplace, dependsOn: 'copyXtfFile') {
    description = 'Import das XTF (Herkunft von Planungsbüros) einer Gemeinde in das Schema "arp_nutzungsplanung_import". Immer nur eine Gemeinde ist in diesem Schema "_import" vorhanden. Bei jedem Import wird das Schema wieder geleert '
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_import_v1'
    models = 'SO_Nutzungsplanung_20171118'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    deleteData= true
    dataset = ili2pgDataset
    dataFile = "upload/${ili2pgDataset}.xtf"
    disableValidation = true
}

task deleteXtfFile_upload(type: Delete, dependsOn: 'importXtfFile'){
    delete "upload/${ili2pgDataset}.xtf"
}

task deleteData_transfer(type: SqlExecutor, dependsOn: 'deleteXtfFile_upload') {
    description = "Löscht/leert die Daten aus dem Schema arp_nutzungsplanung_transfer."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["delete_arp_nutzungsplanung_transfer.sql"]
}

task deleteData_import(type: Ili2pgDelete) {
    description = "Löscht/leert Daten mit dem angegebenen Datasetname (BFS-Nr.) aus dem Schema arp_nutzungsplanung_import_v1"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = 'arp_nutzungsplanung_import_v1'
    dataset = ili2pgDataset
}

task transferData(type: SqlExecutor, dependsOn: 'deleteData_transfer') {
    description = "Führt den Datenumbau in das Schema arp_nutzungsplanung_transfer durch. Das braucht es, damit ein XFT ins Schema arp_nutzungsplanung importiert werden kann"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["insert_arp_nutzungsplanung_transfer.sql"]
    finalizedBy deleteData_import
}

task exportData_Dataset_BFSNr(type: Ili2pgExport) {
    description = "Exportiert die umgebauten Daten mit DataSet= BFSNr aus dem Schema arp_nutzungsplanung_transfer in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_transfer_v1'
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataset = ili2pgDataset
    dataFile= file(ili2pgDataset + ".xtf")
    disableValidation = true
}

task validateData_Dataset_BFSNr(type: IliValidator, dependsOn: 'exportData_Dataset_BFSNr') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(ili2pgDataset + ".xtf")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    allObjectsAccessible = true
    failOnError = false
}

task deleteXtfFile_BFSNr(type: Delete){
    delete file(ili2pgDataset + ".xtf")
}

task importData_Dataset_BFSNr(type: Ili2pgImport) {
    description = 'Import der umgebaute INTERLIS-Datei in das Schema arp_nutzungsplanung mit Dataset=BFS-Nr. Im Schema arp_nutzungsplanung werden die Daten nachgeführt.'
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_v1'
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataset = ili2pgDataset
    dataFile = file(ili2pgDataset + ".xtf")
    disableValidation = true
    finalizedBy deleteXtfFile_BFSNr
}

task exportData_Dataset_Kanton(type: Ili2pgExport) {
    description = "Exportiert die umgebauten Daten mit DataSet=Kanton aus dem Schema arp_nutzungsplanung_transfer in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_transfer_v1'
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataset = 'Kanton'
    dataFile = file(ili2pgDataset + "_Kanton.xtf")
    disableValidation = true
}

task validateData_Dataset_Kanton(type: IliValidator, dependsOn: 'exportData_Dataset_Kanton') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(ili2pgDataset + "_Kanton.xtf")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    allObjectsAccessible = true
    failOnError = false
}

task deleteXtfFile_Kanton(type: Delete){
    delete file(ili2pgDataset + "_Kanton.xtf")
}

task importData_Dataset_Kanton(type: Ili2pgImport) {
    description = 'Import der umgebaute INTERLIS-Datei in das Schema arp_nutzungsplanung mit Dataset=Kanton. Im Schema arp_nutzungsplanung werden die Daten nachgeführt.'
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_kanton_v1'
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataFile = file(ili2pgDataset + "_Kanton.xtf")
    disableValidation = true
    finalizedBy deleteXtfFile_Kanton
}
