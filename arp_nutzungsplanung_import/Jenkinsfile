// Start with a scripted pipeline part
node('master') {
    stage('Prepare') {
        uploadDirName = 'upload'
        uploadFileName = 'uploadFile'
        // By default the uploaded file is stored in the following directory:
        buildDir = "$JENKINS_HOME/jobs/$JOB_BASE_NAME/builds/$BUILD_NUMBER"
        // Create a subdirectory for the uploaded file:
        sh "mkdir $buildDir/$uploadDirName"
        inputFile = input (
            message: 'Datei hochladen',
            parameters: [
                file(name: "$uploadDirName/$uploadFileName", description: 'Hochzuladende Datei auswählen'),
                string(name: 'ili2pgDataset', description: 'BFS-Nummer (Dataset) der Daten angeben')
            ]
        )
        dir(buildDir) {
            stash name: 'uploadDir', includes: "upload/**"
        }
        sh "rm -r $buildDir/$uploadDirName"
    }
}

// Declarative pipeline starts here
pipeline {
    agent { label params.nodeLabel ?: 'gretl' }
    options {
        timeout(time: 6, unit: 'HOURS')
    }
    stages {
        stage('Run GRETL job') {
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
                container('gretl') {
                    dir(env.JOB_BASE_NAME) {
                        unstash name: 'uploadDir'
                        sh "gretl -Pili2pgDataset=$inputFile.ili2pgDataset transferData"
                        waitUntil {
                            sh "gretl -Pili2pgDataset=$inputFile.ili2pgDataset validateData_Dataset_BFSNr validateData_Dataset_Kanton"
                            input message: 'Den Datenimport abschliessen oder die Transferdaten nochmals aus dem Schema arp_nutzungsplanung_transfer exportieren?', parameters: [booleanParam(name: 'FINISH', defaultValue: false, description: 'Häkchen setzen, um den Datenimport abzuschliessen')]
                        }
                        sh "gretl -Pili2pgDataset=$inputFile.ili2pgDataset importData_Dataset_BFSNr importData_Dataset_Kanton"
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            emailext (
                to: "${currentBuild.getBuildCauses()[0]._class == 'hudson.model.Cause$UserIdCause' ? emailextrecipients([requestor()]) : '$DEFAULT_RECIPIENTS'}",
                subject: "GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) ist fehlgeschlagen",
                body: "Die Ausführung des GRETL-Jobs ${JOB_NAME} (${BUILD_DISPLAY_NAME}) war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
    }
}
