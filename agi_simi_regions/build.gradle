/*
./start-gretl.sh --docker-image sogis/gretl:latest --docker-network host --job-directory $PWD/agi_simi_regions

Weitere Schritte für XML:
- Dump aus Int integrieren
- DB-Upgrade
- GRETL-Job lokal ausführen
- Beans ergänzen (preview-layer, ältere Erweiterungen)
- Beans-Query ergänzen und in View giessen
- fat_json als neuen Testfall aufnehmen
- xml erzeugen

Anschliessend:
- Wippe für die Publikation in GRETL implementieren, damit V 2.1 finalisiert werden kann
*/

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'postCopy'

def dbUriPub = 'jdbc:postgresql://localhost:5432/postgres'
def dbUserPub = 'postgres'
def dbPwdPub = 'postgres'

def dbUriSimi = 'jdbc:postgresql://localhost:5432/simi'
def dbUserSimi = dbUserPub
def dbPwdSimi = dbPwdPub

task preCopy(type: SqlExecutor){
    database = [dbUriSimi, dbUserSimi, dbPwdSimi]
    sqlFiles = ['pre_copy/refs_set_null.sql', 'pre_copy/delete_regions.sql']
}

task copyGemeindenKanton(type: Db2Db, dependsOn: preCopy){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriSimi, dbUserSimi, dbPwdSimi]
    transferSets = [
            new TransferSet('copy_from/gemeinden.sql', 'simi.simitheme_sub_area', false),
            new TransferSet('copy_from/kanton.sql', 'simi.simitheme_sub_area', false)
    ];
}

task postCopy(type: SqlExecutor, dependsOn: copyGemeindenKanton){
    database = [dbUriSimi, dbUserSimi, dbPwdSimi]
    sqlFiles = ['post_copy/refs_reset.sql']
}
