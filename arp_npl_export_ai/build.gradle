import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

//defaultTasks 'uploadMgdmLandUsePlans', 'uploadMgdmNoiseSensitivityLevels', 'uploadMgdmWaldabstandslinien'
defaultTasks 'uploadMgdmLandUsePlans', 'uploadMgdmWaldabstandslinien'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
//File tmpFolder = new File("/tmp/gretl-share")
//def pathToTempFolder = tmpFolder.getAbsolutePath()

def iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
def dbSchemaLandUsePlans = "arp_npl"

def iliModelMgdmHauptnutzung = "Nutzungsplanung_Hauptnutzung_V1_1"
def iliModelMgdmLandUsePlans = "Nutzungsplanung_LV95_V1_1"
def dbSchemaMgdmLandUsePlans = "arp_npl_mgdm"
def mgdmLandUsePlansXtfFileName = "ch.so.arp.npl.mgdm.xtf"
def mgdmLandUsePlansZipFileName = "ch.so.arp.npl.mgdm.zip"

def iliModelMgdmNoiseSensitivityLevels = "Laermempfindlichkeitsstufen_LV95_V1_1"
def dbSchemaMgdmSensitivityLevels = "arp_laermempfindlichkeitsstufen_mgdm"
def mgdmSensitivityLevelsXtfFileName = "ch.so.arp.laerm.mgdm.xtf"
def mgdmSensitivityLevelsZipFileName = "ch.so.arp.laerm.mgdm.zip"

def iliModelMgdmWaldabstand = "Waldabstandslinien_LV95_V1_1"
def dbSchemaWaldabstand = "arp_waldabstandslinien_mgdm"
def mgdmWaldabstandXtfFileName = "ch.so.arp.waldabstand.mgdm.xtf"
def mgdmWaldabstandZipFileName = "ch.so.arp.waldabstand.mgdm.zip"

def aiLogin = aiUser + ":" + aiPwd

// Nutzungsplanung

task deleteMgdmLandUsesPlansData(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_arp_npl_mgdm_tables.sql']
}

task importMgdmHauptnutzung(type: Ili2pgImport, dependsOn: 'deleteMgdmLandUsesPlansData') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmHauptnutzung
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = dbSchemaMgdmLandUsePlans
    dataFile = file("Hauptnutzung_CH_V1_1.xml")
    disableValidation = true
}

task transferLandUsePlansData(type: SqlExecutor, dependsOn: 'importMgdmHauptnutzung') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['arp_nutzungsplanung_mgdm.sql']
}

task exportMgdmLandUsePlans(type: Ili2pgExport, dependsOn: 'transferLandUsePlansData') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmLandUsePlans
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = dbSchemaMgdmLandUsePlans
    dataFile = file(mgdmLandUsePlansXtfFileName)
    disableValidation = true
}

task validateMgdmLandUsePlans(type: IliValidator, dependsOn: 'exportMgdmLandUsePlans') {
    dataFiles = [file("Hauptnutzung_CH_V1_1.xml"), file(mgdmLandUsePlansXtfFileName)]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    logFile = "ilivalidator_landuseplans.log"
    allObjectsAccessible = true
    configFile = "config.toml"
    failOnError = true
}

task zipMgdmLandUsePlans(type: Zip, dependsOn: 'validateMgdmLandUsePlans'){
    from pathToTempFolder
    from "."
    include mgdmLandUsePlansXtfFileName
    include "config.toml"
    archiveName mgdmLandUsePlansZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmLandUsePlans(dependsOn: 'zipMgdmLandUsePlans') {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_nutzungsplanung", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmLandUsePlansZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }
    }
}


// Lärm

// Validieren nicht mehr. Kann kaum mit PostGIS-Funktionen gut gelöst werden. Daten müssen
// manuell korrigiert werden.
// -> Nach Korrektur muss bei defaultTasks der Upload-Task wieder hinzugefügt werden.

task transferNoiseSensitivityLevels(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_arp_laermempfindlichkeit_mgdm_tables.sql', 'arp_laermempfindlichkeitsstufen_mgdm.sql']
}

task exportMgdmNoiseSensitivityLevels(type: Ili2pgExport, dependsOn: 'transferNoiseSensitivityLevels') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmNoiseSensitivityLevels
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = dbSchemaMgdmSensitivityLevels
    dataFile = file(mgdmSensitivityLevelsXtfFileName)
    disableValidation = true
}

task validateMgdmNoiseSensitivityLevels(type: IliValidator, dependsOn: 'exportMgdmNoiseSensitivityLevels') {
    dataFiles = [file(mgdmSensitivityLevelsXtfFileName)]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    logFile = "ilivalidator_noisesensitivitylevels.log"
    configFile = "config.toml"
    failOnError = true
}

task zipMgdmNoiseSensitivityLevels(type: Zip, dependsOn: 'validateMgdmNoiseSensitivityLevels'){
    from pathToTempFolder
    from "."
    include mgdmSensitivityLevelsXtfFileName
    include "config.toml"
    archiveName mgdmSensitivityLevelsZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmNoiseSensitivityLevels(dependsOn: 'zipMgdmNoiseSensitivityLevels') {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_laermempfindlichkeitsstufen", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmSensitivityLevelsZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }
    }
}

// Waldabstandslinien

task transferWaldabstandslinien(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_arp_waldabstandslinien_mgdm_tables.sql', 'arp_waldabstandslinien_mgdm.sql']
}

task exportMgdmWaldabstandslinien(type: Ili2pgExport, dependsOn: 'transferWaldabstandslinien') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmWaldabstand
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = dbSchemaWaldabstand
    dataFile = file(mgdmWaldabstandXtfFileName)
    disableValidation = true
}

task validateMgdmWaldabstandslinien(type: IliValidator, dependsOn: 'exportMgdmWaldabstandslinien') {
    dataFiles = [file(mgdmWaldabstandXtfFileName)]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    logFile = "ilivalidator_waldabstandslinien.log"
    configFile = "config.toml"
    failOnError = true
}

task zipMgdmWaldabstandslinien(type: Zip, dependsOn: 'validateMgdmWaldabstandslinien'){
    from pathToTempFolder
    from "."
    include mgdmWaldabstandXtfFileName
    include "config.toml"
    archiveName mgdmWaldabstandZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmWaldabstandslinien(dependsOn: 'zipMgdmWaldabstandslinien') {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_waldabstandslinien", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmWaldabstandZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
        if (response.contains("false") || response == null || response.trim().isEmpty()) {
            throw new GradleException()
        }        
    }
}

