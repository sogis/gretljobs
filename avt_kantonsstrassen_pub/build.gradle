import java.nio.file.Files
import java.nio.file.Paths
import java.io.File
import ch.so.agi.gretl.tasks.*

defaultTasks 'publipub', 'refreshSolr', 'updateSearchIndex_1', 'updateSearchIndex_2'

def shpNameAchsen = 'achsen.shp'
def shpNamePunkte = 'bezugspunkte.shp'
def pathToShpFolder = Paths.get(System.getProperty("java.io.tmpdir"), "avt_achsen").toString()
def zipFile = file("$buildDir/xyz.zip")

task unpackShapes(type: Copy) {
    from zipTree(zipFile)
    into pathToShpFolder
}

task validate_achsen(type: ShpValidator, dependsOn: unpackShapes){
    models = "SO_AVT_Kantonsstrassen_Publikation_20200707"
    dataFiles = [Paths.get(pathToShpFolder, shpNameAchsen).toFile()]
}

task validate_punkte(type: ShpValidator, dependsOn: validate_achsen){
    models = "SO_AVT_Kantonsstrassen_Publikation_20200707"
    dataFiles = [Paths.get(pathToShpFolder, shpNamePunkte).toFile()]
}

task deleteAllFeatures(type: SqlExecutor, dependsOn: validate_punkte){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ['delete_achsen_u_punkte.sql']
}

task importAchsen(type: ShpImport, dependsOn: deleteAllFeatures){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    schemaName = "avt_kantonsstrassen_pub"
    tableName = "achse"
    dataFile = Paths.get(pathToShpFolder, shpNameAchsen).toFile()
    encoding = "UTF-8"
}

task importPunkte(type: ShpImport, dependsOn: importAchsen){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    schemaName = "avt_kantonsstrassen_pub"
    tableName = "bezugspunkt"
    dataFile = Paths.get(pathToShpFolder, shpNamePunkte).toFile()
    encoding = "UTF-8"
}
task publipub(type: Publisher, dependsOn: 'importPunkte'){
    dataIdent = "ch.so.avt.kantonsstrassen"
    userFormats = true

    database = [dbUriPub,dbUserPub,dbPwdPub]
    dbSchema = "avt_kantonsstrassen_pub"
    modelsToPublish = "SO_AVT_Kantonsstrassen_Publikation_20200707"

    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task refreshSolr(type:Exec) {
    mustRunAfter 'publipub'
    commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.avt.kantonsstrassen_achsen,ch.so.avt.kantonsstrassen_bezugspunkte'
}

task updateSearchIndex_1(type: SqlExecutor){
    mustRunAfter 'publipub'
    def layerName = 'ch.so.avt.kantonsstrassen_achsen'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_2(type: SqlExecutor){
    mustRunAfter 'publipub'
    def layerName = 'ch.so.avt.kantonsstrassen_bezugspunkte'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}
