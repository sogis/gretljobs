import java.nio.file.Files
import java.nio.file.Paths
import java.io.File
import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

defaultTasks 'refreshSolr'
 
def achsenFile = file("$buildDir/shapes/achsen.shp")
def punkteFile = file("$buildDir/shapes/bezugspunkte.shp")
def geschwFile = file("$buildDir/shapes/signalisierte_geschwindigkeit.shp")
def zipFile = file("$buildDir/xyz.zip")

/*
docker compose run --rm -u $UID gretl --project-dir=avt_kantonsstrassen_pub importGeschwindigkeiten

COMPOSE_FILE=../gretljobs/docker-compose.yml docker compose run --rm -u $UID --workdir //home/gradle/schema-jobs/shared/schema \
  gretl -PtopicName=avt_kantonsstrassen -PschemaDirName=schema_pub dropSchema createSchema configureSchema
*/

task deleteAllFeatures(type: SqlExecutor){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['delete_all_tables_all_rows.sql']
}

task unpackShapes(type: Copy, dependsOn: deleteAllFeatures) {
    from zipTree(zipFile)
    into "$buildDir/shapes"
}

task validateGeschwindigkeiten(type: ShpValidator, dependsOn: unpackShapes){
    models = "SO_AVT_Kantonsstrassen_Publikation_20250521"
    dataFiles = [geschwFile]
} 

task importGeschwindigkeiten(type: ShpImport, dependsOn: validateGeschwindigkeiten){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "avt_kantonsstrassen_staging_v1"
    tableName = "signalisierte_geschwindigkeit"
    dataFile = geschwFile
    encoding = "UTF-8"
}

task validateAchsen(dependsOn: unpackShapes){
} 

task importAchsen(dependsOn: validateAchsen){
}

task validatePunkte(dependsOn: unpackShapes){
} 

task importPunkte(dependsOn: validatePunkte){
}

/*
task validateAchsen(type: ShpValidator, dependsOn: unpackShapes){
    models = "SO_AVT_Kantonsstrassen_Publikation_20250521"
    dataFiles = [achsenFile]
} 

task importAchsen(type: ShpImport, dependsOn: validateAchsen){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "avt_kantonsstrassen_staging_v1"
    tableName = "achse"
    dataFile = achsenFile
    encoding = "UTF-8"
}

task validatePunkte(type: ShpValidator, dependsOn: unpackShapes){
    models = "SO_AVT_Kantonsstrassen_Publikation_20250521"
    dataFiles = [punkteFile]
} 

task importPunkte(type: ShpImport, dependsOn: validatePunkte){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "avt_kantonsstrassen_staging_v1"
    tableName = "bezugspunkt"
    dataFile = punktefile
    encoding = "UTF-8"
}
*/

task publishFiles(type: Publisher){
    dependsOn "importGeschwindigkeiten", "importAchsen", "importPunkte"
    dataIdent = "ch.so.avt.kantonsstrassen"
    userFormats = true

    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbSchema = "avt_kantonsstrassen_staging_v1"
    modelsToPublish = "SO_AVT_Kantonsstrassen_Publikation_20250521"

    target = ["$buildDir"]

/*
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
*/
}

task transferToPub(type: Db2Db, dependsOn: publishFiles){    
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('bezugspunkt.sql', 'avt_kantonsstrassen_pub_v1.bezugspunkt', true),
        new TransferSet('achse.sql', 'avt_kantonsstrassen_pub_v1.achse', true),
        new TransferSet('signalisierte_geschwindigkeit.sql', 'avt_kantonsstrassen_pub_v1.signalisierte_geschwindigkeit', true)
    ];
}

task refreshSolr(type: Exec, dependsOn: transferToPub) {
        commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.avt.kantonsstrassen_achsen,ch.so.avt.kantonsstrassen_bezugspunkte'
}
