import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths
import java.nio.file.Files
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: 'ch.so.agi.gretl'

defaultTasks 'prepare_db', 'importAll'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def pathToDataFile = Paths.get(pathToTempFolder)
def pathToDataZip = Paths.get(pathToTempFolder, 'data.zip')

////////////////Bodenbedeckung ///////////////////////
task prepare_db(type: SqlExecutor) {
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['prepare_db.sql']
}

task makeSchemaMopublic(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AGI_MOpublic_20201009"
    dbschema = "agi_mopublic_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true 
    nameByTopic = true 
    createMetaInfo = true 
}

task importBodenbedeckung(type: Db2Db, dependsOn: makeSchemaMopublic){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('bodenbedeckung.sql','agi_mopublic_pub.mopublic_bodenbedeckung', true)
    ];        
}

////////////////Gemeindegrenzen ///////////////////////

//Es muss kein Schema angelgt werden, da die Gemeindegrenzen ebenfalls im Schema mopublic sind. 

task importGemeindegrenzen(type: Db2Db, dependsOn: makeSchemaMopublic){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gemeindegrenzen.sql','agi_mopublic_pub.mopublic_gemeindegrenze', true)
    ];        
}

////////////////Kataster Belastete Standorte (KBS) ///////////////////////

//Es gibt kein Modell. Da aber alles im Umbau ist, wird auch darauf verzichtet, ein solches an zu legen. 

task makeSchemaAltlasten(type: SqlExecutor){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['create_schema_and_table_afu_altlasten_pub.sql']
}

task importAltlasten(type: Db2Db, dependsOn: makeSchemaAltlasten){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('altlasten_belastete_standorte_altlast4web.sql','afu_altlasten_pub.belastete_standorte_altlast4web', true),
    ];        
}

////////////////Gew√§sserschutz ///////////////////////

task makeSchemaGewaesserschutz(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AfU_Gewaesserschutz_Publikation_20220817"
    dbschema = "afu_gewaesserschutz_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true 
    nameByTopic = true 
    createMetaInfo = true 
}

task importGewaesserschutz(type: Db2Db, dependsOn: makeSchemaGewaesserschutz){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('gewaesserschutz_zone_areale.sql','afu_gewaesserschutz_pub.gewaesserschutz_schutzzone', true)
    ];        
}

////////////////Klimaeignung ///////////////////////

task makeSchemaKlimaeignung(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "Klimaeignung_V1_2"
    dbschema = "klimaeignung"
    importTid = true
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createTidCol = true 
    createFk = true
    createFkIdx = true
    createEnumTabs = true 
    createBasketCol = true 
    createDatasetCol = true 
    createGeomIdx = true
    defaultSrsCode = "2056"
    createNumChecks = true
}

task downloadKlimaeignung(type: Download, dependsOn: makeSchemaKlimaeignung) {
    description = "Download Klimaeignung" 
    src 'https://data.geo.admin.ch/ch.blw.klimaeignung-typ/klimaeignung-typ/klimaeignung-typ_2056.xtf.zip'
    //src 'https://data.geo.admin.ch/ch.blw.klimaeignung-typ/xtf/2056/ch.blw.klimaeignung-typ.zip'
    dest file(pathToDataZip)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task downloadKlimaeignung_katalog(type: Download, dependsOn: downloadKlimaeignung) {
    description = "Download Klimaeignung" 

    src 'https://models.geo.admin.ch/BLW/Klimaeignung_V1_2_Kataloge_20171120.xml'
    dest file(pathToDataFile)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataFile).size()
    }
}

task unzipKlimaeignung(type: Copy, dependsOn: downloadKlimaeignung) {
    description = "Unzip Klimaeignung"
    from zipTree(pathToDataZip) 
    into pathToUnzipFolder 
}

task importKlimaeignung_katalog(type: Ili2pgReplace, dependsOn: downloadKlimaeignung_katalog){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(pathToDataFile.toString()+'/Klimaeignung_V1_2_Kataloge_20171120.xml')
    dbschema = "klimaeignung"
    importTid = "true"
    dataset = "eignung"
}

task importKlimaeignung(type: Ili2pgReplace, dependsOn: ['importKlimaeignung_katalog', 'unzipKlimaeignung']){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    dataFile = file(pathToUnzipFolder.toString()+'/04-Klimaeignung_V1_2_20171120.xtf')
    dbschema = "klimaeignung"
    deleteData = true
    importTid = true
    dataset = "klimaeignung"
    disableAreaValidation = true
}

////////////////Auen ///////////////////////

task makeSchemaAuen(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "Auen_fff_modell_20210811"
    modeldir = "01_Datenimport/Auen; http://models.geo.admin.ch"
    dbschema = "auen"
    importTid = true
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createTidCol = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task downloadAuen(type: Download, dependsOn: makeSchemaAuen) {
    description = "Download Auen" 

    src 'https://data.geo.admin.ch/ch.bafu.bundesinventare-auen/bundesinventare-auen/bundesinventare-auen_2056.shp.zip'
    dest file(pathToDataZip)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task unpackFilesAuen(type: Copy, dependsOn: downloadAuen) {
    description = "Unzip Data.zip"
    from zipTree(pathToDataZip)
    into pathToUnzipFolder
}

task importAuen(type: ShpImport, dependsOn: unpackFilesAuen){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "auen"
    tableName = "auen_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/N2017_Revision_Auengebiete_20171101_20221122.shp')
}

task importAuen2(type: ShpImport, dependsOn: importAuen){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "auen"
    tableName = "auen_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/N2017_Revision_Auengebiete_Anhang2_20171101.shp')
}

////////////////Flachmoore ///////////////////////

task makeSchemaFlachmoore(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "Flachmoore_fff_modell_20210811"
    modeldir = "01_Datenimport/Flachmoore; http://models.geo.admin.ch"
    dbschema = "flachmoore"
    importTid = true
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createTidCol = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task downloadFlachmoore(type: Download, dependsOn: makeSchemaFlachmoore) {
    description = "Download Flachmoore" 
    src 'https://data.geo.admin.ch/ch.bafu.bundesinventare-flachmoore/data.zip'
    dest file(pathToDataZip)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task unpackFilesFlachmoore(type: Copy, dependsOn: downloadFlachmoore) {
    description = "Unzip Data.zip"
    from zipTree(pathToDataZip)
    into pathToUnzipFolder
}

task importFlachmoore(type: ShpImport, dependsOn: unpackFilesFlachmoore){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "flachmoore"
    tableName = "flachmoore_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/Flachmoor_LV95/flachmoor_20210701.shp')
}

////////////////Hochmoore ///////////////////////

task makeSchemaHochmoore(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "Hochmoore_fff_modell_20210811"
    modeldir = "01_Datenimport/Hochmoore; http://models.geo.admin.ch"
    dbschema = "hochmoore"
    importTid = true
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createTidCol = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task downloadHochmoore(type: Download, dependsOn: makeSchemaHochmoore) {
    description = "Download Hochmoore" 
    src 'https://data.geo.admin.ch/ch.bafu.bundesinventare-hochmoore/data.zip'
    dest file(pathToDataZip)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task unpackFilesHochmoore(type: Copy, dependsOn: downloadHochmoore) {
    description = "Unzip Data.zip"
    from zipTree(pathToDataZip)
    into pathToUnzipFolder
}

task importHochmoore(type: ShpImport, dependsOn: unpackFilesHochmoore){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "hochmoore"
    tableName = "hochmoore_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/Hochmoor_LV95/hochmoor.shp')
}

////////////////Trockenwiesen- und Weiden ///////////////////////
task makeSchemaTww(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "Trockenwiesenweiden_fff_modell_20210811"
    modeldir = "01_Datenimport/Trockenwiesen_und_Weiden; http://models.geo.admin.ch"
    dbschema = "trockenwiesenweiden"
    importTid = true
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createTidCol = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task downloadTww(type: Download, dependsOn: makeSchemaTww) {
    description = "Download Trockenwiesen- und Weiden" 
    src 'https://data.geo.admin.ch/ch.bafu.bundesinventare-trockenwiesen_trockenweiden/data.zip'
    dest file(pathToDataZip)
    overwrite true 
    doLast {
        println "FileSize = " + file(pathToDataZip).size()
    }
}

task unpackFilesTww(type: Copy, dependsOn: downloadTww) {
    description = "Unzip Data.zip"
    from zipTree(pathToDataZip)
    into pathToUnzipFolder
}

task importTww(type: ShpImport, dependsOn: unpackFilesTww){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "trockenwiesenweiden"
    tableName = "trockenwiesenwden_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/TWW_LV95/trockenwiesenweiden.shp')
}

task importTww2(type: ShpImport, dependsOn: importTww){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    schemaName = "trockenwiesenweiden"
    tableName = "trockenwiesenwden_standorte"
    dataFile = file(pathToUnzipFolder.toString()+'/TWW_LV95/trockenwiesenweiden_A2.shp')
}

////////////////Schadstoffbelastete B√∂den ///////////////////////

task makeSchemaSchadstoffbelasteteBoeden(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_AFU_Verzeichnis_schadstoffbelastete_Boeden_Publikation_20200701"
    dbschema = "afu_schadstoffbelastete_boeden_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importSchadstoffbelasteteBoeden(type: Db2Db, dependsOn: makeSchemaSchadstoffbelasteteBoeden){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('schadstoffe_schrebergaerten.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_schrebergarten', true),
            new TransferSet('schadstoffe_rebbau.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_rebbau', true),
            new TransferSet('schadstoffe_gaertnerei.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_gaertnerei', true),
            new TransferSet('schadstoffe_stahlmasten.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_stahlmast', true),
            new TransferSet('schadstoffe_stahlbruecke.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_stahlbruecke', true),
            new TransferSet('schadstoffe_stahlkonstruktion.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_stahlkonstruktion', true),
            new TransferSet('schadstoffe_flugplatz.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_flugplatz', true),
            new TransferSet('schadstoffe_bodenbelastungsgebiete.sql','afu_schadstoffbelastete_boeden_pub.schdstfflstt_bden_bodenbelastungsgebiet', true),
    ];        
}

////////////////Nutzungsplanung ///////////////////////

task makeSchemaNutzungsplanung(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ARP_Nutzungsplanung_Publikation_20201005"
    dbschema = "arp_npl_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importNutzungsplanung(type: Db2Db, dependsOn: makeSchemaNutzungsplanung){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('nutzungsplanung_grundnutzung.sql','arp_npl_pub.nutzungsplanung_grundnutzung', true),
            new TransferSet('nutzungsplanung_erschliessung.sql','arp_npl_pub.nutzungsplanung_erschliessung_flaechenobjekt', true)
    ];        
}


////////////////Naturreservate ///////////////////////

task makeSchemaNaturreservate(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ARP_Naturreservate_Publikation_20200609"
    dbschema = "arp_naturreservate_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importNaturreservate(type: Db2Db, dependsOn: makeSchemaNaturreservate){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('naturreservate_reservat.sql','arp_naturreservate_pub.naturreservate_reservat', true),
    ];        
}

////////////////Flachmoore von regionaler Bedeutung ///////////////////////

task makeSchemaNaturschutzobjekte(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ARP_Naturschutzobjekte_Publikation_20210721"
    modeldir = "01_Datenimport/Naturschutzobjekte; http://models.geo.admin.ch"
    dbschema = "arp_naturschutz_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importNaturschutzobjekte(type: Db2Db, dependsOn: makeSchemaNaturschutzobjekte){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('naturschutz_flachmoore.sql','arp_naturschutz_pub.naturschutzobjkte_flachmoore', true),
    ];        
}

////////////////IS-Boden ///////////////////////

//Modell erscheint erst Ende 2021 daher hier noch mit sql-Executor
task makeSchemaIsBoden(type: SqlExecutor){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    sqlFiles = ['create_schema_and_table_afu_isboden_pub.sql']
}

task importIsBoden(type: Db2Db, dependsOn: makeSchemaIsBoden){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('isboden_bodeneinheit.sql','afu_isboden_pub.bodeneinheit', true),
    ];        
}

////////////////√úbersteuerungslayer (inkl. Abbaustellen) ///////////////////////

task makeSchemaUebersteuerung(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ALW_FFF_Uebersteuerung_20220404"
    dbschema = "alw_fff_uebersteuerung"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
    deleteData = true
}

task importAbbaustellen(type: Db2Db, dependsOn: makeSchemaUebersteuerung){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('afu_abbaustellen_fff.sql','alw_fff_uebersteuerung.uebersteuerung', true),
    ];        
}

task importUebersteuerung(type: Db2Db, dependsOn: importAbbaustellen){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('alw_uebersteuerung_fff.sql','alw_fff_uebersteuerung.uebersteuerung', false),
    ];        
}

////////////////Gewaesserraum ///////////////////////

task makeSchemaGewaesserraum(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ALW_Gewaesserraum_20210531"
    dbschema = "alw_gewaesserraum"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importGewaesserraum(type: Db2Db, dependsOn: makeSchemaGewaesserraum){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('alw_gewaesserraum_fff.sql','alw_gewaesserraum.gewaesserraum', true),
    ];        
}

//////////////// Fruchtfolgefl√§chen-Schema in dem dann die Berechnung stattfindet ///////////////////////

task makeSchemaFFF(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ALW_Fruchtfolgeflaechen_Publikation_20220110"
    dbschema = "alw_fruchtfolgeflaechen"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

//////////////// Kantonsgrenzen ///////////////////////

task makeSchemaHoheitsgrenzen(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_Hoheitsgrenzen_Publikation_20170626"
    dbschema = "agi_hoheitsgrenzen_pub"
    strokeArcs = true
    beautifyEnumDispName = true
    nameByTopic = true 
    createUnique = true
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importHoheitsgrenzen(type: Db2Db, dependsOn: makeSchemaHoheitsgrenzen){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('hoheitsgrenzen.sql','agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsgrenze', true),
    ];        
}

//////////////// Alte Fruchtfolgefl√§chen///////////////////////

task makeSchemaFFF_alt(type: Ili2pgImportSchema){
    database = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    models = "SO_ALW_Fruchtfolgeflaechen_Publikation_20220110"
    dbschema = "alw_fruchtfolgeflaechen_alt"
    strokeArcs = true
    beautifyEnumDispName = true
    createUnique = true
    nameByTopic = true 
    createMetaInfo = true 
    createFk = true 
    createFkIdx = true
    createEnumTabs = true 
    createGeomIdx = true
    defaultSrsCode = 2056
    createNumChecks = true
}

task importFFF_alt(type: Db2Db, dependsOn: makeSchemaFFF_alt){
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriProcessing, dbUserProcessing, dbPwdProcessing]
    transferSets = [
            new TransferSet('fruchtfolgeflaechen_alt.sql','alw_fruchtfolgeflaechen_alt.inventarflaechen_fruchtfolgeflaeche', true),
    ];        
}

//////////////// Alle Datens√§tze importieren///////////////////////

task importAll() {
    dependsOn 'importBodenbedeckung',
        'importGemeindegrenzen',
        'importAltlasten',
        'importGewaesserschutz',
        'importKlimaeignung',
        'importAuen2',
        'importFlachmoore',
        'importHochmoore',
        'importTww2',
        'importSchadstoffbelasteteBoeden',
        'importNutzungsplanung',
        'importNaturreservate',
        'importNaturschutzobjekte',
        'importIsBoden',
        'importGewaesserraum',
        'importUebersteuerung',
        'makeSchemaFFF',
        'importHoheitsgrenzen',
        'importFFF_alt'
}

