pipeline {
    options {
        timeout(time: 1, unit: 'DAYS')
    }
    agent {
        kubernetes {
            inheritFrom env.NODE_LABEL ?: 'gretl'
            yamlMergeStrategy merge()
            yaml '''
            spec:
              containers:
                - name: processing-db
                  image: sogis/postgis:16-3.4-bookworm
                  resources:
                    requests:
                      cpu: 300m
                      memory: "2Gi"
                    limits:
                      cpu: "2"
                      memory: "8Gi"
                  env:
                    - name: POSTGRES_USER
                      value: processing
                    - name: POSTGRES_PASSWORD
                      value: processing
                    - name: PGDATA
                      value: /var/lib/postgresql/data/pgdata
                  volumeMounts:
                    - name: postgresql-data-volume
                      mountPath: /var/lib/postgresql/data
              volumes:
                - name: postgresql-data-volume
                  emptyDir: {}
'''
        }
    }
    stages {
        stage('Run GRETL job') {
            environment {
                ORG_GRADLE_PROJECT_dbUriProcessing = 'jdbc:postgresql://127.0.0.1/processing'
                ORG_GRADLE_PROJECT_dbUserProcessing = 'processing'
                ORG_GRADLE_PROJECT_dbPwdProcessing = 'processing'
            }
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
                container('gretl') {
                    sh "gretl --project-dir=${env.JOB_BASE_NAME} prepare_db importAll"
                    sh "gretl --project-dir=${env.JOB_BASE_NAME} fff_zusammensetzen"
                    waitUntil {
                        sh "gretl --project-dir=${env.JOB_BASE_NAME} fff_to_edit_db"
                        input message: 'Resultat publizieren oder Berechnung nochmals durchführen?', parameters: [booleanParam(name: 'PUBLISH_RESULT', defaultValue: false, description: 'Häkchen setzen, um das Resultat zu publizieren und den Job abzuschliessen')]
                    }
                    sh "gretl --project-dir=${env.JOB_BASE_NAME} fff_to_edit_db_finish"
                }
            }
        }
    }
    post {
        unsuccessful {
            emailext (
                to: "${currentBuild.getBuildCauses()[0]._class == 'hudson.model.Cause$UserIdCause' ? emailextrecipients([requestor()]) : '$DEFAULT_RECIPIENTS'}",
                subject: "GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) ist fehlgeschlagen",
                body: "Die Ausführung des GRETL-Jobs ${JOB_NAME} (${BUILD_DISPLAY_NAME}) war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
    }
}
