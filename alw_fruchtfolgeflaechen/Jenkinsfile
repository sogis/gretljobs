// Start with a scripted pipeline part
node('master') {
    stage('Prepare') {
        gretlJobRepoUrl = env.GRETL_JOB_REPO_URL
    }
}

// Declarative pipeline starts here
pipeline {
    options {
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'DAYS')
    }
    agent {
      kubernetes {
        cloud 'openshift'
        inheritFrom 'gretl'
        defaultContainer 'jnlp'
        yaml '''
          spec:
            securityContext:
              supplementalGroups: [26]
            containers:
            - name: jnlp
              envFrom:
              - configMapRef:
                  name: gretl-resources
              - secretRef:
                  name: gretl-secrets
            - name: processing-db
              image: crunchydata/crunchy-postgres-gis:centos8-13.3-3.1-4.6.3
              env:
              - name: MODE
                value: postgres
              - name: PG_DATABASE
                value: processing
              - name: PG_LOCALE
                value: en_US.UTF-8
              - name: PG_PRIMARY_PORT
                value: 5432
              - name: PG_MODE
                value: primary
              - name: PG_USER
                value: user
              - name: PG_PASSWORD
                value: pass
              - name: PG_PRIMARY_USER
                value: repl
              - name: PG_PRIMARY_PASSWORD
                value: repl
              - name: PG_ROOT_PASSWORD
                value: secret
          '''
      }
    }
    stages {
        stage('Run GRETL-Job') {
            environment {
                ORG_GRADLE_PROJECT_dbUriProcessing = 'jdbc:postgresql://127.0.0.1/processing'
                ORG_GRADLE_PROJECT_dbUserProcessing = 'user'
                ORG_GRADLE_PROJECT_dbPwdProcessing = 'pass'
            }
            steps {
                git url: gretlJobRepoUrl, branch: "${params.BRANCH ?: 'master'}", changelog: false
                dir(env.JOB_BASE_NAME) {
                    sh 'gretl -Dorg.gradle.jvmargs=-Xmx2G task1'
                    sh 'gretl -Dorg.gradle.jvmargs=-Xmx2G task2'
                    waitUntil {
                        sh 'gretl -Dorg.gradle.jvmargs=-Xmx2G task3'
                        input message: 'Resultat publizieren oder Berechnung nochmals durchführen?', parameters: [booleanParam(name: 'PUBLISH_RESULT', defaultValue: false, description: 'Häkchen setzen, um das Resultat zu publizieren und den Job abzuschliessen')]
                    }
                    sh 'gretl -Dorg.gradle.jvmargs=-Xmx2G task4'
                }
            }
        }
    }
    post {
        unsuccessful {
            emailext (
                to: '${DEFAULT_RECIPIENTS}',
                recipientProviders: [requestor()],
                subject: "GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) ist fehlgeschlagen",
                body: "Die Ausführung des GRETL-Jobs ${JOB_NAME} (${BUILD_DISPLAY_NAME}) war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
    }
}
