import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'validateData', 'importXTF_pub'

def FileName = "arp_naturreservate.xtf"
def FileNamePub = "arp_naturreservate_pub.xtf"

task exportDataEdit (type: Ili2pgExport) {
    description = "Exportiert die Daten aus dem Schema arp_naturreservate in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_naturreservate'
    models = 'SO_ARP_Naturreservate_20200609'
    dataFile= file(FileName)
    disableValidation = true
}

task validateDataEdit(type: IliValidator, dependsOn: 'exportDataEdit') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileName)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task transferArpNaturreservate(type: Db2Db, dependsOn: 'validateDataEdit'){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_naturreservate_pub_naturreservate_pflanzenliste.sql',
                    'arp_naturreservate_staging_v1.naturreservate_pflanzenliste', true),
            new TransferSet('arp_naturreservate_pub_naturreservate_reservate.sql',
                    'arp_naturreservate_staging_v1.naturreservate_reservat', true),
            new TransferSet('arp_naturreservate_pub_naturreservate_teilgebiete.sql',
                    'arp_naturreservate_staging_v1.naturreservate_teilgebiet', true)
    ];
}

task exportData (type: Ili2pgExport, dependsOn: 'transferArpNaturreservate') {
    description = "Exportiert die umgebauten Daten aus dem Schema arp_naturreservate_staging in ein INTERLIS-Datei."
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_naturreservate_staging_v1'
    models = 'SO_ARP_Naturreservate_Publikation_20200609'
    dataFile= file(FileNamePub)
    disableValidation = true
}

task validateData(type: IliValidator, dependsOn: 'exportData') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileNamePub)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task deleteData_staging_pub (type: SqlExecutor) {
    description = "LÃ¶scht/leert die Daten aus dem Schema arp_naturreservate_staging"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_naturreservate_staging.sql"]
}

task refreshSolr(type:Exec, dependsOn:'transferArpNaturreservate') {
    commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.arp.naturreservate.reservate'
}

task importXTF_pub(type: Ili2pgImport) {
    description = 'Import der umgebaute INTERLIS-Datei in das Schema arp_naturreservate_pub.'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_naturreservate_pub'
    models = 'SO_ARP_Naturreservate_Publikation_20200609'
    dataFile = file(FileNamePub)
    deleteData = true
    disableValidation = true
    finalizedBy deleteData_staging_pub, refreshSolr
}
