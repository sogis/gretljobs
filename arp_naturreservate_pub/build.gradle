import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.tasks.Curl.MethodType
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Files
import java.nio.file.Paths
import java.io.File

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'validateData', 'uploadPlanregister', 'updateSearchIndex'

def FileName = "arp_naturreservate.xtf"
def FileNamePub = "arp_naturreservate_pub.xtf"

def pathToTempFolder = System.getProperty("java.io.tmpdir")

//Für Planregister
def iliModelPlanregister = "SO_Nutzungsplanung_Planregister_Publikation_20221115"
def dbSchemaPlanregister = "arp_nutzungsplanung_planregister_pub_v1"
def planregisterFileBaseName = "ch.so.arp.planregister"
def planregisterXtfFileName = planregisterFileBaseName+".xml"
def planregisterZipFileName = planregisterFileBaseName+".xml.gz"

task exportDataEdit (type: Ili2pgExport) {
    description = "Exportiert die Daten aus dem Schema arp_naturreservate in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_naturreservate'
    models = 'SO_ARP_Naturreservate_20200609'
    dataFile= file(FileName)
    disableValidation = true
}

task validateDataEdit(type: IliValidator, dependsOn: 'exportDataEdit') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileName)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task transferArpNaturreservate(type: Db2Db, dependsOn: 'validateDataEdit'){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('arp_naturreservate_pub_naturreservate_pflanzenliste.sql',
                    'arp_naturreservate_staging_v1.naturreservate_pflanzenliste', true),
            new TransferSet('arp_naturreservate_pub_naturreservate_reservate.sql',
                    'arp_naturreservate_staging_v1.naturreservate_reservat', true),
            new TransferSet('arp_naturreservate_pub_naturreservate_teilgebiete.sql',
                    'arp_naturreservate_staging_v1.naturreservate_teilgebiet', true)
    ];
}

task exportData (type: Ili2pgExport, dependsOn: 'transferArpNaturreservate') {
    description = "Exportiert die umgebauten Daten aus dem Schema arp_naturreservate_staging in ein INTERLIS-Datei."
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_naturreservate_staging_v1'
    models = 'SO_ARP_Naturreservate_Publikation_20200609'
    dataFile= file(FileNamePub)
    disableValidation = true
}

task validateData(type: IliValidator, dependsOn: 'exportData') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file(FileNamePub)
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task deleteData_staging_pub (type: SqlExecutor) {
    description = "Löscht/leert die Daten aus dem Schema arp_naturreservate_staging"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_naturreservate_staging.sql"]
}

task importXTF_pub(type: Ili2pgImport) {
    description = 'Import der umgebaute INTERLIS-Datei in das Schema arp_naturreservate_pub.'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_naturreservate_pub'
    models = 'SO_ARP_Naturreservate_Publikation_20200609'
    dataFile = file(FileNamePub)
    deleteData = true
    disableValidation = true
    finalizedBy deleteData_staging_pub
}
// EXPORT Typo3
// Datenumbau für Planregister (Nur Daten aus Schema "arp_naturreservate" werden ersetzt) und an Typo3 senden


task deleteData_planregister_pub (type: SqlExecutor, dependsOn: importXTF_pub ) {
    description = "Löscht/leert die Daten aus dem Schema arp_nutzungsplanung_planregister_pub"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_nutzungsplanung_planregister_pub_naturreservate.sql"]
}

task transfer_planregister_pub(type: Db2Db, dependsOn: 'deleteData_planregister_pub') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('insert_arp_nutzungsplanung_planregister_pub_naturreservate.sql', 'arp_nutzungsplanung_planregister_pub_v1.planregister_dokument', false),
    ];
}

task deleteData_doppelte_dokumente (type: SqlExecutor, dependsOn:transfer_planregister_pub) {
    description = "Löscht die doppelten Dokumente aus dem Schema arp_nutzungsplanung_planregister_pub"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ["delete_arp_nutzungsplanung_planregister_pub_doppelte_dokumente.sql"]
}

task exportPlanregisterPub(type: Ili2pgExport, dependsOn: 'deleteData_doppelte_dokumente') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    models = iliModelPlanregister
    dbschema = dbSchemaPlanregister
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName))
    disableValidation = true
    // Kein Dataset, weil alle Daten enthalten sein sollen.
}

task zipPlanregister(type: Gzip, dependsOn: 'exportPlanregisterPub') {
    dataFile = file(Paths.get(pathToTempFolder, planregisterXtfFileName))
    gzipFile = file(Paths.get(pathToTempFolder, planregisterZipFileName))
}

task uploadPlanregister(type: Curl, dependsOn: 'zipPlanregister') {
    serverUrl = digiplanUrl
    method = MethodType.POST
    headers = ["Content-Type": "application/xml", "Content-Encoding": "gzip"]
    dataBinary = file(Paths.get(pathToTempFolder, planregisterZipFileName))
    user = digiplanUser
    password = digiplanPwd
    expectedStatusCode = 202
}

task updateSearchIndex(type: SqlExecutor){
    mustRunAfter 'uploadPlanregister'
    def layerName = 'ch.so.arp.naturreservate.reservate'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}
