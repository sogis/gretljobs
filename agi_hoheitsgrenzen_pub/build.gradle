import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

description = "GRETL-Job f√ºr Datenumbau der Hoheitsgrenzen innerhalb der edit-DB, ins pub-Schema (pub-DB, edit-DB), am Ende ins pub-Schema der sogis-DB"


defaultTasks 'publishPub', 'refreshSolr', 'updateSearchIndex_1', 'updateSearchIndex_2'


task transferAgiHoheitsgrenzen(type: Db2Db) {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = sourceDb
    transferSets = [
            new TransferSet('agi_hoheitsgrenzen_edit_pub_gemeindegrenze.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindegrenze', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_gemeindename_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindename_a4', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_gemeindename_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindename_a3', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_bezirksname_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksname_a4', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_bezirksname_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksname_a3', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_kantonsname_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsname_a4', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_kantonsname_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsname_a3', true)
    ]
}

task createGeometriesAgiHoheitsgrenzen(type: SqlExecutor, dependsOn:'transferAgiHoheitsgrenzen') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = [
            'agi_hoheitsgrenzen_edit_pub_bezirksgrenze.sql',
            'agi_hoheitsgrenzen_edit_pub_kantonsgrenze.sql',
            'agi_hoheitsgrenzen_edit_pub_gemeindegrenze_generalisiert.sql',
            'agi_hoheitsgrenzen_edit_pub_bezirksgrenze_generalisiert.sql',
            'agi_hoheitsgrenzen_edit_pub_kantonsgrenze_generalisiert.sql'
    ]

    finalizedBy 'fixGeometries'
}

task fixGeometries(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['fix_geometries.sql']
}

task transferAgiHoheitsgrenzenToPubDb(type: Db2Db, dependsOn:'createGeometriesAgiHoheitsgrenzen') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_bezirksgrenze.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksgrenze', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_bezirksgrenze_generalisiert.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksgrenze_generalisiert', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_bezirksname_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksname_a3', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_bezirksname_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_bezirksname_a4', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_gemeindegrenze.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindegrenze', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_gemeindegrenze_generalisiert.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindegrenze_generalisiert', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_gemeindename_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindename_a3', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_gemeindename_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_gemeindename_a4', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_kantonsgrenze.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsgrenze', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_kantonsgrenze_generalisiert.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsgrenze_generalisiert', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_kantonsname_a3.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsname_a3', true),
            new TransferSet('agi_hoheitsgrenzen_edit_pub_to_pub_kantonsname_a4.sql',
                    'agi_hoheitsgrenzen_pub.hoheitsgrenzen_kantonsname_a4', true)
    ]
}

task publishPub(type: Publisher, dependsOn:'transferAgiHoheitsgrenzenToPubDb'){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.agi.av.hoheitsgrenzen"
    dbSchema = "agi_hoheitsgrenzen_pub"
    modelsToPublish = "SO_Hoheitsgrenzen_Publikation_20170626"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task refreshSolr(type:Exec) {
    mustRunAfter 'publishPub'
    commandLine 'curl', '-i', '--max-time', '5', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.agi.gemeindegrenzen,ch.so.agi.bezirksgrenzen'
}

task updateSearchIndex_1(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.agi.gemeindegrenzen'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_2(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.agi.bezirksgrenzen'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}
