 
import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

defaultTasks 'transferToPub'
//defaultTasks 'dbImport'

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')
def pathToDataZip = Paths.get(pathToTempFolder, "ch.swisstopo.amtliches-gebaeudeadressverzeichnis.zip")
def xtfFilePath = Paths.get(pathToUnzipFolder.toString(), 'pure_adr.xtf')

task download(type: Download){
    description = "Download official index of addresses from swisstopo"
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }
    src 'https://data.geo.admin.ch/ch.swisstopo.amtliches-gebaeudeadressverzeichnis/xtf/2056/ch.swisstopo.amtliches-gebaeudeadressverzeichnis.zip'
    dest pathToTempFolder
    overwrite true
}

task unzipData(type: Copy, dependsOn: 'download') {
    description = "Unzip file."
    doLast {
        println "File unzipped to directory: " + pathToUnzipFolder
    }
    from zipTree(pathToDataZip)
    into file(pathToUnzipFolder)
    include "**/*.xtf"
}

task dbImport(type: Ili2pgImport, dependsOn: 'unzipData') {
    description = "Import addresses into Edit database"
    doLast {
        println "Data imported into db: " + dbUriEdit
    }
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = "agi_swisstopo_gebaeudeadressen"
    models = "OfficialIndexOfAddresses_V2_1"
    disableValidation = true
    dataFile = file(xtfFilePath)
    deleteData = true
    strokeArcs = true
}

task transferToPub(type: Db2Db, dependsOn: 'dbImport') {
    description = "Transfer und Umbau der Daten von Edit nach Pub"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet("transform_swisstopo_gebaeudeadressen_pub.sql", 'agi_swisstopo_gebaeudeadressen_pub_v1.gebaeudeadressen_adresse', true)
    ]
    fetchSize = 1000
    batchSize = 1000
}
