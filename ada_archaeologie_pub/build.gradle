import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'publishPub', 'refreshSolr', 'updateSearchIndex_1','updateSearchIndex_2','updateSearchIndex_3','updateSearchIndex_4'

def edit = [dbUriEdit, dbUserEdit, dbPwdEdit]
def pub = [dbUriPub, dbUserPub, dbPwdPub]
def imdas = [dbUriImdaspro, dbUserImdaspro, dbPwdImdaspro]

task importFromImdas(type: Db2Db){
    description = 'Importiert die Attributdaten ab den Imdas DB-Views'
    sourceDb = imdas
    targetDb = edit
    transferSets = [
        new TransferSet('import/fundstelle.sql', 'ada_archaeologie_v1.fachapplikation_fundstelle', true),
        new TransferSet('import/rrb.sql', 'ada_archaeologie_v1.fachapplikation_regierungsratsbeschluss', true)
    ]
}

task updateRelationTids(type: SqlExecutor, dependsOn: importFromImdas){
    description = 'Aktualisiert die t_id Beziehungsspalten aufgrund der Fst-Nummer / RRB-Nummer'
    database = edit
    sqlFiles = [
            'update_relation/attr_geo.sql',
            'update_relation/fst_rrb.sql',
            'update_relation/unlink_geomless_rrb.sql',
            'update_relation/delete_unlinked_rrb.sql',
        ]
}

task validateJoined(type: Ili2pgValidate, dependsOn: updateRelationTids) {
    description = 'Validiert die Sach- und Geodaten und Beziehungen gemäss Edit-Modell'
    database = edit
    models = 'SO_ADA_Archaeologie_20230417'
    modeldir = '%ILI_FROM_DB;http://models.interlis.ch/'
    dbschema = 'ada_archaeologie_v1'
}

task copyToPubDb(type: Db2Db, dependsOn: validateJoined){
    description = 'Kopiert die Daten auf die Pub-Db. Ausgenommen: Fundstellen im Siedlungsgebiet'
    sourceDb = edit
    targetDb = pub
    transferSets = [
        new TransferSet('to_pub_db/flaeche.sql', 'ada_archaeologie_pub_v1.restricted_flaechenfundstelle', true),
        new TransferSet('to_pub_db/punkt.sql', 'ada_archaeologie_pub_v1.restricted_punktfundstelle', true),
        new TransferSet('to_pub_db/ablage_gemeinde.sql', 'ada_archaeologie_pub_v1.public_ablage_gemeinde', true),
        new TransferSet('to_pub_db/schutzbereich.sql', 'ada_archaeologie_pub_v1.public_schutzbereich_innenstadt', true)
    ]
}

task publicInSiedlung(type: SqlExecutor, dependsOn: copyToPubDb){
    description = 'Kopiert alle Fundstellen im Siedlungsgebiet in die öffentlichen Tabellen'
    database = pub
    sqlFiles = [
        'public/flaeche_delete.sql',
        'public/flaeche_insert.sql',
        'public/punkt_delete.sql',
        'public/punkt_insert.sql'
    ]
}

task setEnumTxt(type: SqlExecutor, dependsOn: publicInSiedlung){
    description = 'Setzt die sprechenden Bezeichnungen *_txt der Enumerationen aller Fundstellen-Tabellen'
    database = pub
    sqlFiles = ['enum_txt/update_txt.sql']
}

task publishPub(type: Publisher, dependsOn: 'setEnumTxt') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.ada.archaeologie"
    dbSchema = "ada_archaeologie_pub_v1"
    modelsToPublish = "SO_ADA_Archaeologie_Publikation_20230417"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task refreshSolr(type:Exec) {
    mustRunAfter 'publishPub'
	commandLine 'curl', '-i', '--max-time', '10', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.ada.archaeologie.flaechenfundstellen,ch.so.ada.archaeologie.flaechenfundstellen_geschuetzt,ch.so.ada.archaeologie.punktfundstellen,ch.so.ada.archaeologie.punktfundstellen_geschuetzt'
}

task updateSearchIndex_1(type: SqlExecutor){
        mustRunAfter 'publishPub'
        def layerName = 'ch.so.ada.archaeologie.punktfundstellen'

        database = [dbUriPub, dbUserPub, dbPwdPub]
        def dbSearchSchema = dbSearchSchemaPub

        String layerNameString = "'${layerName}'"
        sqlParameters = [
                [layername: layerNameString, db_schema: dbSearchSchema]
        ]
        sqlFiles = [
                '../searchindex_deleteFeatures.sql',
                'searchindex_' + layerName + '.sql'
        ]
}

task updateSearchIndex_2(type: SqlExecutor){
        mustRunAfter 'publishPub'
        def layerName = 'ch.so.ada.archaeologie.punktfundstellen_geschuetzt'

        database = [dbUriPub, dbUserPub, dbPwdPub]
        def dbSearchSchema = dbSearchSchemaPub

        String layerNameString = "'${layerName}'"
        sqlParameters = [
                [layername: layerNameString, db_schema: dbSearchSchema]
        ]
        sqlFiles = [
                '../searchindex_deleteFeatures.sql',
                'searchindex_' + layerName + '.sql'
        ]
}

task updateSearchIndex_3(type: SqlExecutor){
        mustRunAfter 'publishPub'
        def layerName = 'ch.so.ada.archaeologie.flaechenfundstellen'

        database = [dbUriPub, dbUserPub, dbPwdPub]
        def dbSearchSchema = dbSearchSchemaPub

        String layerNameString = "'${layerName}'"
        sqlParameters = [
                [layername: layerNameString, db_schema: dbSearchSchema]
        ]
        sqlFiles = [
                '../searchindex_deleteFeatures.sql',
                'searchindex_' + layerName + '.sql'
        ]
}

task updateSearchIndex_4(type: SqlExecutor){
        mustRunAfter 'publishPub'
        def layerName = 'ch.so.ada.archaeologie.flaechenfundstellen_geschuetzt'

        database = [dbUriPub, dbUserPub, dbPwdPub]
        def dbSearchSchema = dbSearchSchemaPub

        String layerNameString = "'${layerName}'"
        sqlParameters = [
                [layername: layerNameString, db_schema: dbSearchSchema]
        ]
        sqlFiles = [
                '../searchindex_deleteFeatures.sql',
                'searchindex_' + layerName + '.sql'
        ]
}
