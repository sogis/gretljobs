
// Macht ein Datenumbau in die Struktur des Publikationsmodells (Schema "arp_nutzungsplanung_transfer_pub"). 
// Das resultierende XTF wird ins Schema "arp_nutzungsplanung_pub" importiert. Das Schema "arp_nutzungsplanung_transfer_pub" wird auch vom GRETL-Job arp_nutzungsplanung_pub verwendet.

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'importXTF_stage', 'importXTF_pub'

task deleteData_transfer_pub (type: SqlExecutor) {
    description = "Löscht/leert die Daten aus dem Schema arp_nutzungsplanung_transfer_pub."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["delete_arp_nutzungsplanung_transfer_pub.sql"]
}

task exportDataEdit (type: Ili2pgExport, dependsOn: 'deleteData_transfer_pub') {
    description = "Exportiert die Daten aus dem Schema arp_nutzungsplanung_kanton in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_kanton_v1'
    models = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataFile= file("kanton.xtf")
    disableValidation = true
}

task validateDataEdit(type: IliValidator, dependsOn: 'exportDataEdit') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file("kanton.xtf")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    configFile = 'SO_ARP_Nutzungsplanung_Nachfuehrung_20201005.ini'
    allObjectsAccessible = true
    failOnError = true
}

task transferData(type: SqlExecutor, dependsOn: 'validateDataEdit') {
    description = "Führt den Datenumbau in das Schema arp_nutzungsplanung_transfer_pub durch. Das braucht es, damit ein XFT pro Dataser ins Schema arp_nutzungsplanung_pub importiert resp. ersetzt werden kann"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["insert_arp_nutzungsplanung_transfer_pub.sql"]
}

task exportData (type: Ili2pgExport, dependsOn: 'transferData') {
    description = "Exportiert die umgebauten Daten aus dem Schema arp_nutzungsplanung_transfer_pub in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = 'arp_nutzungsplanung_transfer_pub_v1'
    models = 'SO_ARP_Nutzungsplanung_Publikation_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataFile= file("kanton_pub.xtf")
    disableValidation = true
}

task validateData(type: IliValidator, dependsOn: 'exportData') {
    description = "Validiert die exportierten INTERLIS-Datei gegen das Modell."
    dataFiles = file("kanton_pub.xtf")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    failOnError = true
}

task importXTF_stage(type: Ili2pgReplace, dependsOn: 'validateData') {
    description = 'Import der umgebaute INTERLIS-Datei "Kanton" in das Schema arp_nutzungsplanung_staging.'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_nutzungsplanung_staging_v1'
    models = 'SO_ARP_Nutzungsplanung_Publikation_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataset = 'Kanton'
    dataFile = file("kanton_pub.xtf")
    disableValidation = true
}

task delete_Dataset_stage(type: Ili2pgDelete) {
    description = "Löscht Daten mit Dataset= Kanton aus dem Schema arp_nutzungsplanung_staging"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    models = 'SO_ARP_Nutzungsplanung_Publikation_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dbschema = 'arp_nutzungsplanung_staging_v1'
    dataset = 'Kanton'
}

task importXTF_pub(type: Ili2pgReplace) {
    description = 'Import der umgebaute INTERLIS-Datei "Kanton" in das Schema arp_nutzungsplanung_pub.'
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbschema = 'arp_nutzungsplanung_pub_v1'
    models = 'SO_ARP_Nutzungsplanung_Publikation_20201005'
    if (findProperty('ili2dbModeldir')) modeldir = ili2dbModeldir
    dataset = 'Kanton'
    dataFile = file("kanton_pub.xtf")
    disableValidation = true
    finalizedBy delete_Dataset_stage
}
