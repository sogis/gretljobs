
import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

defaultTasks 'transferData', 'updateSearchIndex_1', 'updateSearchIndex_2'

def bucket
if (gretlEnvironment == "test") {
    bucket = "'https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.gb2av-test/'"
} else if (gretlEnvironment == "integration") {
    bucket = "'https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.gb2av-int/'"
} else if (gretlEnvironment == "production") {
    bucket = "'https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.gb2av/'"
} else {
    bucket = "'https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.gb2av-dev/'"
}

task upsertVollzugsmeldungen(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['agi_gb2av_controlling_vollzugsmeldungen.sql']
}

task upsertAvMutationen(type: SqlExecutor, dependsOn: 'upsertVollzugsmeldungen') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['agi_gb2av_controlling_av_mutationen.sql']
}

task transferData(type: Db2Db, dependsOn: 'upsertAvMutationen') {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    sqlParameters = [bucket: bucket]

    transferSets = [
            new TransferSet('agi_gb2av_controlling_pub_controlling_gb2av_vollzugsmeldung_delta.sql', 'agi_gb2av_controlling_pub.controlling_gb2av_vollzugsmeldung_delta', true),
            new TransferSet('agi_gb2av_controlling_pub_controlling_av2gb_mutationen.sql', 'agi_gb2av_controlling_pub.controlling_av2gb_mutationen', true)
    ];
}

task updateSearchIndex_1(type: SqlExecutor){
    mustRunAfter 'transferData'
    def layerName = 'ch.so.agi.av.gb2av.controlling_mutationen'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_2(type: SqlExecutor){
    mustRunAfter 'transferData'
    def layerName = 'ch.so.agi.av.gb2av.controlling_vollzugsmeldungen'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub

    String layerNameString = "'${layerName}'"
    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            'searchindex_' + layerName + '.sql'
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}
