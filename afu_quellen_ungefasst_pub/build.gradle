import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

/*
docker compose run --rm -u $UID gretl --project-dir=afu_quellen_ungefasst_pub
*/

def schemaNameEdit = "afu_quellen_ungefasst_v1"
def schemaNamePub = "afu_quellen_ungefasst_pub_v1"
def iliModelName = "SO_AFU_Quellen_ungefasst_20240131"

defaultTasks "pubFiles"

task pubReplace(type: Db2Db){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    sqlParameters = [dbSchema:schemaNameEdit]
    transferSets = [
        new TransferSet('quelle.sql', schemaNamePub + '.quelle_ungefasst', true),
        new TransferSet('erhebungsstand.sql', schemaNamePub + '.erhebungsstand', true)
    ]
}

task pubUpdateTxtCol(type: SqlExecutor, dependsOn: pubReplace){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlParameters = [dbSchema:schemaNamePub]
    sqlFiles = ['updTxtCol.sql']
}

task pubFiles(type: Publisher, dependsOn: pubUpdateTxtCol){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dataIdent = "ch.so.afu.quellen_ungefasst"
    dbSchema = schemaNameEdit
    modelsToPublish = iliModelName
    userFormats = true
    target = [file("$buildDir")]
    //target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    //kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    //kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}