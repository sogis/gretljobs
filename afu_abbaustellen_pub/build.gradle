import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "publipub"

def tmpDir = buildDir.toString()
def appXtfPath = tmpDir + "/appdata.xtf"
def gisXtfPath = tmpDir + "/geodata.xtf"
def schemaNameEdit = "afu_abbaustellen_v1"

task publiedit(type: Publisher){
  dataIdent = "ch.so.afu.abbaustellen.relational"
  userFormats = true
  database = [dbUriEdit, dbUserEdit, dbPwdEdit]
  dbSchema = "afu_abbaustellen_v1"
  modelsToPublish = "SO_AFU_ABBAUSTELLEN_20210630"

  target = ["sftp://$sftpServerSogis/$sftpUserSogis", sftpUserSogis, sftpPwdSogis]
  kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
}


task downloadAppXtf(type: Download, dependsOn: publiedit){
    description "Download transferfile from afu webapp 'abbaustellen'"
    src afuAbbaustellenAppXtfUrl
    dest appXtfPath
    overwrite true
}

task deleteAppData(type: SqlExecutor, dependsOn: downloadAppXtf){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [dbSchema:schemaNameEdit]
    sqlFiles = ['deleteAppData.sql']
}

task exportGisXtf(type: Ili2pgExport, dependsOn: deleteAppData){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = schemaNameEdit
    disableValidation = true
    dataFile = gisXtfPath
    models = 'SO_AFU_ABBAUSTELLEN_20210630'
}

task validateJoined(type: IliValidator, dependsOn: exportGisXtf){
    dataFiles = [gisXtfPath, appXtfPath]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
    allObjectsAccessible = true
}

task importAppData(type: Ili2pgImport, dependsOn: validateJoined){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    dbschema = schemaNameEdit
    disableValidation = true
    dataFile = appXtfPath
}

task writeToPub(type: Db2Db, dependsOn: importAppData){ 
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('abbaustelle.sql', 'afu_abbaustellen_pub_v2.abbaustelle', true)
    ];
}

task publipub(type: Publisher, dependsOn:'writeToPub'){
  dataIdent = "ch.so.afu.abbaustellen"
  userFormats = true
  database = [dbUriPub,dbUserPub,dbPwdPub]
  dbSchema = "afu_abbaustellen_pub_v2"
  modelsToPublish = "SO_AFU_ABBAUSTELLEN_Publikation_20221103"

  target = ["sftp://$sftpServerSogis/$sftpUserSogis", sftpUserSogis, sftpPwdSogis]
  kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
}





