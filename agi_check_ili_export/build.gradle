import java.nio.file.Paths
import ch.so.agi.gretl.tasks.*

apply plugin: 'ch.so.agi.gretl'

description = """\n
Exportiert sämtliche modellbasierten Datenerfassungen in eine 
INTERLIS-Transferdatei, um die Modellkonformität zu prüfen.

In Zukunft könnte auch eine direktere Prüfung in der Datenbank
stattfinden, ohne zu versuchen die Datei zu exportieren
(Feature request für ilivalidator).

Usage:
gretl -I init.gradle checkAllModels --continue > checkAllModels.log

* init.gradle wird benötigt, da eine noch nicht veröffentlichte
gretl-Version verwendet wird.
* --continue ermöglicht das Ausführen der weiteren Tasks auch wenn
ein Fehler beim Validieren/Exportieren eines Modelles aufgetreten
ist.
* Einzelne Modelle können ebenfalls geprüft werden.
"""

apply plugin: 'ch.so.agi.gretl'

ext {
    sourceDbUrl = "jdbc:postgresql://geodb-t.verw.rootso.org:5432/sogis"
    sourceDbUser = "hdus"
    sourceDbPass = System.env.sourceDbPass    

    outputDir = rootProject.projectDir

    todaysDate = new Date().format('yyyy-MM-dd')
    models = []
    models.add(["SO_Agglomerationsprogramme_20170512", "arp_aggloprogramme", "arp_aggloprogramme_" + todaysDate ])
    models.add(["SO_ARP_Nutzungsvereinbarung_20170512", "arp_nutzungsvereinbarung", "arp_nutzungsvereinbarung_" + todaysDate ])
    models.add(["SO_Forstreviere_20170512", "awjf_forstreviere", "awjf_forstreviere_" + todaysDate ])
    models.add(["SO_Hoheitsgrenzen_20170623", "agi_hoheitsgrenzen", "agi_hoheitsgrenzen_" + todaysDate ])
    models.add(["SO_AWJF_Wegsanierungen_20170629", "awjf_wegsanierungen", "awjf_wegsanierungen_" + todaysDate ])
}

// Create a dynamic task for every model we 
// want to validate and for cleaning up if
// validaton was successful.
models.each { model ->
    def modelName = model.getAt(0)
    def dbSchema = model.getAt(1)
    
    task "checkModel_$modelName"(type: Ili2pgExport) {
        description = "INTERLIS validation against database schema: $dbSchema ($modelName)"
        database = [dbUriSogis, dbUserSogis, dbPwdSogis]
        dbschema = dbSchema
        models = modelName
        disableValidation = false
        logFile = file(Paths.get(outputDir.toString(), dbSchema+".log"))
        dataFile = file(Paths.get(outputDir.toString(), dbSchema+".xtf"))

        finalizedBy "removeFiles_$modelName"
    }

    task "removeFiles_$modelName"(type: Delete) {
        description = "Remove files from model export: $modelName"

        onlyIf {
            project.getTasksByName("checkModel_$modelName", false).getAt(0).state.failure == null
        }

        delete file(Paths.get(outputDir.toString(), dbSchema+".log")), file(Paths.get(outputDir.toString(), dbSchema+".xtf")) 
    }
}

// This is kinda dummy task. The magic is the 'dependsOn' logic.
task checkAllModels() {
    description = "Validate all models."
}

checkAllModels.dependsOn {
    tasks.findAll { task -> task.name.startsWith('checkModel_') }
}