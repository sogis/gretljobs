import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.tasks.Curl.MethodType

apply plugin: 'ch.so.agi.gretl'

description = "GRETL-Job für den Import von Sichtungsmeldungen der Asiatischen Hornisse vom infofauna WFS"

defaultTasks 'transformData'

def duckDbPath = "${buildDir}/imported.duckdb"  // tbd: Ordner muss bestehen
def duckDbUri = "jdbc:duckdb:${duckDbPath}"
def duckDbFile = file(duckDbPath)

def individualsPath = "${buildDir}/individuals.geojson"
def activeNestsPath = "${buildDir}/active_nests.geojson"
def unactiveNestsPath = "${buildDir}/unactive_nests.geojson"

def individualsFile = file(individualsPath)
def activeNestsFile = file(activeNestsPath)
def unactiveNestsFile = file(unactiveNestsPath)

if (duckDbFile.exists()) {
    duckDbFile.delete()
}

// Sichtungsmeldungen von Hornissen herunterladen
// tbd: Abfrage auf Kt. SO BBOX plus Buffer und das laufende Jahr einschränken (so dass Daten für die Dauer einer Saison nachgeführt werden)
tasks.register('downloadIndividuals', Curl) {
    serverUrl = "https://geoserver.infofauna.ch/geoserver/neovelutina/wfs?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=neovelutina:individuals&SRSNAME=urn:ogc:def:crs:EPSG::2056&outputFormat=application/json"
    method = MethodType.GET
    outputFile = individualsFile
    expectedStatusCode = 200
    user = neovelutinaWfsUser
    password = neovelutinaWfsPwd
}

// Sichtungsmeldungen von aktiven Nestern herunterladen
// tbd: Abfrage auf Kt. SO BBOX plus Buffer und das laufende Jahr einschränken (so dass Daten für die Dauer einer Saison nachgeführt werden)
tasks.register('downloadActiveNests', Curl) {
    serverUrl = "https://geoserver.infofauna.ch/geoserver/neovelutina/wfs?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=neovelutina:active_nests&SRSNAME=urn:ogc:def:crs:EPSG::2056&outputFormat=application/json"
    method = MethodType.GET
    outputFile = activeNestsFile
    expectedStatusCode = 200
    user = neovelutinaWfsUser
    password = neovelutinaWfsPwd
}

// Sichtungsmeldungen von zerstörten Nestern herunterladen
// tbd: Abfrage auf Kt. SO BBOX plus Buffer und das laufende Jahr einschränken (so dass Daten für die Dauer einer Saison nachgeführt werden)
tasks.register('downloadUnactiveNests', Curl) {
    serverUrl = "https://geoserver.infofauna.ch/geoserver/neovelutina/wfs?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=neovelutina:unactive_nests&SRSNAME=urn:ogc:def:crs:EPSG::2056&outputFormat=application/json"
    method = MethodType.GET
    outputFile = unactiveNestsFile
    expectedStatusCode = 200
    user = neovelutinaWfsUser
    password = neovelutinaWfsPwd
}

// Heruntergeladene Daten mit duckDB einlesen und transformieren
tasks.register('transformData', SqlExecutor){
    dependsOn = [downloadIndividuals, downloadActiveNests, downloadUnactiveNests]
    database = [duckDbUri]
    sqlParameters = [
        individuals_path: "'${individualsFile}'".toString(),
        active_nests_path: "'${activeNestsFile}'".toString(),
        unactive_nests_path: "'${unactiveNestsFile}'".toString()
        ]
    sqlFiles = files('create_duckdb_tables.sql')
}

// Daten in die Edit-DB kopieren (db2db; wie WKB zurück nach geometry? andere Lösung als via WKB?)