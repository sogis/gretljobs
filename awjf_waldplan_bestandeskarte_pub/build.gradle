import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'


defaultTasks 'publishPub'


task deleteAwjfWaldplanPub(type: SqlExecutor){
    database = [dbUriPub, dbUserPub, dbPwdPub]
    sqlFiles = ['delete_awjf_waldplan_bestandeskarte_pub.sql']      
}

task transferAwjfWaldplanUebersichtPub(type: Db2Db, dependsOn: deleteAwjfWaldplanPub){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
             new TransferSet('awjf_waldplan_bestandeskarte_uebersicht_pub.sql', 'awjf_waldplan_bestandeskarte_pub_v1.waldplan_uebersicht', true)
    ];        
}

task transferAwjfWaldplanPub(type: Db2Db, dependsOn: transferAwjfWaldplanUebersichtPub){
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('awjf_waldplan_bestandeskarte_pub.sql', 'awjf_waldplan_bestandeskarte_pub_v1.waldplan_bestandeskarte', false)
    ];        
}

task refreshSolr(type: Exec, dependsOn: transferAwjfWaldplanPub) {
    commandLine 'curl', '-i', '--max-time', '10', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.awjf.bestandeskarte_wald_flaechen,ch.so.awjf.waldplan.waldeigentum,ch.so.awjf.waldplan.waldfunktion,ch.so.awjf.waldplan.waldplantyp'
}

task publishPub(type: Publisher, dependsOn: 'refreshSolr') {
    database = [switchToProd(dbUriPub), dbUserPub, dbPwdPub]
    dataIdent = "ch.so.awjf.waldplan_bestandeskarte"
    dbSchema = "awjf_waldplan_bestandeskarte_pub_v1"
    modelsToPublish = "SO_AWJF_Waldplan_Bestandeskarte_Publikation_20230111"
    userFormats = true
    validationConfig = "novalidation.toml"
    target = ["sftp://$sftpServerSogis/$sftpUserSogis", sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
def switchToProd(dbUri) {
  String readUri = dbUri.replaceFirst("geodb-t.", "geodb.")

  if(readUri.equals(dbUri))
    readUri = dbUri.replaceFirst("geodb-i.", "geodb.")

  return readUri
}
