import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
apply plugin: 'ch.so.agi.gretl'


defaultTasks 'publishPub', 'updateSearchIndex_1', 'updateSearchIndex_2', 'updateSearchIndex_3', 'updateSearchIndex_4'


task transferAwjfWaldplanUebersichtPub(type: Db2Db) {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
             new TransferSet('awjf_waldplan_bestandeskarte_uebersicht_pub.sql', 'awjf_waldplan_bestandeskarte_pub_v1.waldplan_uebersicht', true)
    ];
}

task transferAwjfWaldplanPub(type: Db2Db, dependsOn: transferAwjfWaldplanUebersichtPub) {
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = sourceDb
    transferSets = [
            new TransferSet('awjf_waldplan_bestandeskarte_pub.sql', 'awjf_waldplan_bestandeskarte_pub_v1.waldplan_bestandeskarte', true)
    ];
}

task publishPub(type: Publisher, dependsOn: 'transferAwjfWaldplanPub') {
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.awjf.waldplan_bestandeskarte"
    dbSchema = "awjf_waldplan_bestandeskarte_pub_v1"
    modelsToPublish = "SO_AWJF_Waldplan_Bestandeskarte_Publikation_20230111"
//     userFormats = true
    validationConfig = "novalidation.toml"
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}

task updateSearchIndex_1(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.awjf.bestandeskarte_wald_flaechen'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_2(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.awjf.waldplan.waldeigentum'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_3(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.awjf.waldplan.waldfunktion'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}

task updateSearchIndex_4(type: SqlExecutor){
    mustRunAfter 'publishPub'
    def layerName = 'ch.so.awjf.waldplan.waldplantyp'
    def sqlFileName = 'searchindex_' + layerName + '.sql'

    database = [dbUriPub, dbUserPub, dbPwdPub]
    def dbSearchSchema = dbSearchSchemaPub
    String layerNameString = "'${layerName}'"

    sqlParameters = [
            [layername: layerNameString, db_schema: dbSearchSchema]
    ]
    sqlFiles = [
            '../searchindex_deleteFeatures.sql',
            sqlFileName
    ]
    doFirst {
        println 'layer name: ' + layerName
    }
}
