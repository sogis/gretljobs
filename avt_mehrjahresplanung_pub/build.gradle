import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'transferData'

task validateInputFile(type: CsvValidator) {
    models = "SO_AVT_Mehrjahresplanung_20240911"
    modeldir = rootProject.projectDir.toString() + ";http://models.interlis.ch"
    dataFiles = [ csvFilename ]
    valueSeparator = ';'
    firstLineIsHeader = true
    encoding = "Windows-1252"
    configFile = "csv_file_validation.ini"
}

task replaceStartHeader(){
    dependsOn validateInputFile
    description = "Ersetzt start zu astart."
    doLast {
        ant.replace(
            file: csvFilename,
            token: "start",
            value: "astart",
            encoding: "Windows-1252")
    }
}

task replacePhaseHeader(){
    dependsOn validateInputFile
    description = "Ersetzt phase zu aphase."
    doLast {
        ant.replace(
            file: csvFilename,
            token: "phase",
            value: "aphase",
            encoding: "Windows-1252")
    }
}

task emptyTable(type: SqlExecutor) {
    dependsOn replaceStartHeader, replacePhaseHeader
    description = "Leere die Datenbanktabelle"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['delete_projekte.sql']
}

task importFile(type: CsvImport) {
    dependsOn emptyTable
    description = "Importiere die CSV-Datei"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    schemaName = "avt_mehrjahresplanung_v1"
    tableName = "projekte_projekt"
    valueSeparator = ';'
    dataFile = csvFilename
    encoding = "Windows-1252"
}

task copyKantonsstrassenData(type: Db2Db) {
    dependsOn importFile
    sourceDb = [dbUriPub, dbUserPub, dbPwdPub]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
        new TransferSet('select_achsen.sql', 'avt_mehrjahresplanung_v1.kantonsstrassen_achse', true),
        new TransferSet('select_bezugspunkte.sql', 'avt_mehrjahresplanung_v1.kantonsstrassen_bezugspunkt', true)
    ]
}

task setAssociations(type: SqlExecutor) {
    dependsOn copyKantonsstrassenData
    description = "Füge die Beziehungen von Projekte zu den Bezugspunkten"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['update_projekt.sql']
}

task handleObsoleteGeometries(type: SqlExecutor) {
    dependsOn setAssociations
    description = "Setze ein Obsolet-Datum und lösche Geometrie älter als sechs Monate"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['update_projektgeometrie.sql']
}

task validateData(type: Ili2pgValidate) {
    dependsOn handleObsoleteGeometries
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = "SO_AVT_Mehrjahresplanung_20240911"
    dbschema = "avt_mehrjahresplanung_v1"
}

task transferData(type: Db2Db) {
    dependsOn validateData
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('select_projekte_und_geometrie.sql', 'avt_mehrjahresplanung_pub_v1.projekt', true)
    ]
}
