import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'betriebe_update_anzahl_szenarien'

def DB_Schema_QRcat = "afu_qrcat_v1"
def DB_Schema_QRcat_Staging = "afu_qrcat_staging_v1"

task transfer_qrcat_to_staging(type: Db2Db){
    description = "Zuerst werden die scharfen QRcat Daten im staging-Schema parkiert"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    transferSets = [
            new TransferSet('qrcat_toxreferenzszenario.sql', "${DB_Schema_QRcat_Staging}.qrcat_toxreferenzszenario", true),
            new TransferSet('qrcat_detailszenario_grundhaeufigkeit.sql', "${DB_Schema_QRcat_Staging}.qrcat_detailszenario_grundhaeufigkeit", true),
            new TransferSet('qrcat_fwert.sql', "${DB_Schema_QRcat_Staging}.qrcat_fwert", true),
            new TransferSet('qrcat_szenario.sql', "${DB_Schema_QRcat_Staging}.qrcat_szenario", true),
            new TransferSet('qrcat_toxischunguenstigster_sektor.sql', "${DB_Schema_QRcat_Staging}.qrcat_toxischunguenstigster_sektor", true),
            new TransferSet('qrcat_letalflaeche.sql', "${DB_Schema_QRcat_Staging}.qrcat_letalflaeche", true)
    ];
}

task "clean_qrcat_before_onlinerisk_import"(type: SqlExecutor,dependsOn: "transfer_qrcat_to_staging") {
description = "QRcat Daten in der richtigen Reihenfolge (dependencies) löschen vor dem Online-Risk Löschen und Neuimport"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['delete_qrcat.sql']
}

task "clean_onlinerisk_before_import"(type: SqlExecutor,dependsOn: "clean_qrcat_before_onlinerisk_import") {
    description = "OnlineRisk Daten in der richtigen Reihenfolge (dependencies) löschen vor dem Neuimport"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['delete_online_risk.sql']
}

task transfer_onlinerisk(type: Db2Db,dependsOn: "clean_onlinerisk_before_import"){
    description = "Übertrag benötigte OnlineRisk-Daten aus AIO PostgreSQL-Datenbank"
    sourceDb = [dbUriOnlinerisk, dbUserOnlinerisk, dbPwdOnlinerisk]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    transferSets = [
            new TransferSet('betrieb.sql', 'afu_qrcat_v1.onlinerisk_betrieb', true, (String[])["geometrie:wkt:2056"]),
            new TransferSet('untersuchungseinheit.sql', 'afu_qrcat_v1.onlinerisk_untersuchungseinheit', true, (String[])["geometrie:wkt:2056"]),
            new TransferSet('gebaeude.sql', 'afu_qrcat_v1.onlinerisk_gebaeude', true, (String[])["geometrie:wkt:2056"]),
            new TransferSet('bereich.sql', 'afu_qrcat_v1.onlinerisk_bereich', true),
            new TransferSet('stoff.sql', 'afu_qrcat_v1.onlinerisk_stoff', true),
            new TransferSet('stoff_in_bereich.sql', 'afu_qrcat_v1.onlinerisk_stoff_in_bereich', true)
    ];
}

task transfer_qrcat_from_staging(type: Db2Db,dependsOn: "transfer_onlinerisk"){
    description = "Reimport der scharfen QRcat Daten die im staging-Schema parkiert waren"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat_Staging]
    transferSets = [
            new TransferSet('qrcat_toxreferenzszenario.sql', "${DB_Schema_QRcat}.qrcat_toxreferenzszenario", false),
            new TransferSet('qrcat_detailszenario_grundhaeufigkeit.sql', "${DB_Schema_QRcat}.qrcat_detailszenario_grundhaeufigkeit", false),
            new TransferSet('qrcat_fwert.sql', "${DB_Schema_QRcat}.qrcat_fwert", false),
            new TransferSet('qrcat_szenario.sql', "${DB_Schema_QRcat}.qrcat_szenario", false),
            new TransferSet('qrcat_toxischunguenstigster_sektor.sql', "${DB_Schema_QRcat}.qrcat_toxischunguenstigster_sektor", false),
            new TransferSet('qrcat_letalflaeche.sql', "${DB_Schema_QRcat}.qrcat_letalflaeche", false)
    ];
}

task "betriebe_fehlende_koordinaten_ergaenzen"(type: SqlExecutor,dependsOn: "transfer_qrcat_from_staging") {
    description = "Bei den Betrieben gibt es fehlende Koordinaten die wir versuchen aus den verbundenen Tabellen zu ergänzen."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['update_fehlende_koordinaten_betrieb.sql']
}

task "betriebe_update_anzahl_szenarien"(type: SqlExecutor,dependsOn: "betriebe_fehlende_koordinaten_ergaenzen") {
    description = "Aktualisiere die Anzahl der verbundenen Szenarien an Betrieben."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlParameters = [DB_Schema_QRcat:DB_Schema_QRcat]
    sqlFiles = ['update_anzahl_szenarien_betrieb.sql']
}
