import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths
import java.nio.file.Files
import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*
import de.undercouch.gradle.tasks.download.Download

apply plugin: 'ch.so.agi.gretl'
apply plugin: 'org.hidetake.ssh'

// variables
def dbPath = "$buildDir/sein.duckdb"
def dbUriDuckDB = "jdbc:duckdb:$dbPath"
def datasetName = "importdata" // for naming tables in sql
def downloadSrc = 'https://data.geo.admin.ch/ch.bak.bundesinventar-schuetzenswerte-ortsbilder/bundesinventar-schuetzenswerte-ortsbilder/bundesinventar-schuetzenswerte-ortsbilder_2056.xtf.zip'
def downloadFile = file("$buildDir/${datasetName}.zip")
def unzipTargetDir = file("$buildDir/${datasetName}")
def xtfPath = new File("$unzipTargetDir/ISOS_V2_20250304.xtf")
def CataloguePath = new File("$unzipTargetDir/ISOS_Catalogues_V2_20220426.xml")

// first task
tasks.register("first"){
    dependsOn ":01_setup_duckdb:last"
}

// copy duckdb
tasks.register("copyDuckDB", Copy){
    dependsOn "first"

    doFirst {
        def targetDir = file(buildDir)
        if (targetDir.exists()) {
            println "Deleting existing build directory: ${targetDir.absolutePath}"
            targetDir.deleteDir()
        }
        println "Copying DuckDB from 01_setup_duckdb..."
    }
    
    from project(':01_setup_duckdb').file("${project(':01_setup_duckdb').buildDir}/sein.duckdb")
    into buildDir
    
    doLast {
        println "DuckDB successfully copied to ${buildDir}/sein.duckdb"
    }
}

// download task
tasks.register("downloadData", Download) {
    dependsOn "copyDuckDB"
    src downloadSrc
    dest downloadFile
    overwrite true
}

// unzip task
tasks.register("unzipData", Copy){
    dependsOn 'downloadData'
    doLast {
        println "File unzipped to directory: " + unzipTargetDir
    }
    from zipTree(downloadFile)
    into file(unzipTargetDir)
}

// create schema for isos data
tasks.register("createSchema", Ili2duckdbImportSchema) {
    dependsOn "copyDuckDB"
    dbfile = file(dbPath)
    models = "ISOS_V2"
    dbschema = "bundesinventar_isos"
    createBasketCol = true
    createTidCol = true
}

tasks.register("importCatalogue", Ili2duckdbImport) {
    dependsOn "createSchema"
    dependsOn "unzipData"
    dbfile = file(dbPath)
    models = "ISOS_V2"
    dbschema = "bundesinventar_isos"
    dataFile = files(CataloguePath)
    dbfile = file(dbPath)
    importTid = true
}

// import into duckdb
tasks.register("ili2duckdbImport", Ili2duckdbImport) {
    dependsOn "importCatalogue"
    dependsOn "unzipData"
    models = "ISOS_V2"
    dbschema = "bundesinventar_isos"
    dataFile = files(xtfPath)
    dbfile = file(dbPath)
    importTid = true

    doFirst {
        println "Importiere Datei: " + files(xtfPath).singleFile
        println "Datenbank: " + file(dbPath)
    }
}

// copy data to Sammeltabelle
tasks.register("importXTFData",SqlExecutor){
    dependsOn "ili2duckdbImport"
    database = [dbUriDuckDB]
    sqlFiles = files(
        load_extension_spatial,
        load_extension_postgres,
        'import_isos.sql'
    )
}

// export parquet-file
tasks.register("exportParquet", SqlExecutor) {
    dependsOn "importXTFData"
    database = [dbUriDuckDB]
    sqlParameters = [parquet_path_quoted: "'" + "$buildDir/theme_sammeltabelle.parquet" + "'"]
    sqlFiles = files(
        load_extension_spatial,
        export_parquet
    )
}

// last task
tasks.register("last"){
    dependsOn "exportParquet"
}