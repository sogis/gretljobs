import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'publishData'

/**
 * Validiere vorgängig die Daten in der Erfassungs-Datenbank. Da die Daten
 * direkt in der Erfassungs-Datenbank bearbeitet werden, muss geprüft werden,
 * ob die Daten aktuell in einem validen Zustand sind.
 */ 
task validateData(type: Ili2pgValidate){
    description = "Validiere die Daten im Modell SO_AGI_LK_Nachfuehrungseinheiten_20231124"
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = "SO_AGI_LK_Nachfuehrungseinheiten_20231124"
    dbschema = "agi_lk_nachfuehrungseinheiten_v1"
}

/**
 * Baue die Daten aus der Erfassungs-Datenbank in die Publikations-Datenbank.
 * um.
 */
task transferData(type: Db2Db) {
    dependsOn "validateData"
    description = "Baue die Daten vom Erfassungsmodell ins Publikationsmodell um"
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
        new TransferSet('select_transfer_data.sql',
                        'agi_lk_nachfuehrungseinheiten_pub_v1.nachfuehrungseinheit',
                        true)
    ];
}

/**
 * Publiziere die Daten.
 */
task publishData(type: Publisher){
    dependsOn "transferData"
    description = "Publiziere die Daten"
    database = [dbUriPub, dbUserPub, dbPwdPub]
    dataIdent = "ch.so.agi.lk.nachfuehrungseinheiten"
    dbSchema = "agi_lk_nachfuehrungseinheiten_pub_v1"
    modelsToPublish = "SO_AGI_LK_Nachfuehrungseinheiten_Publikation_20231124"
    userFormats = true
    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}