pipeline {
    agent { label env.NODE_LABEL ?: 'gretl' }

    options {
        timeout(time: 6, unit: 'HOURS')
    }
    parameters {
        booleanParam(defaultValue: true,
                description: 'Update layer search index: rebuild of the layer search index',
                name: 'UPDATE_LAYERS'
        )
        booleanParam(defaultValue: false,
                description: 'Update entire feature search index: complete rebuild of the feature search index',
                name: 'UPDATE_FEATURES'
        )

        // TODO: Parameter needed for toggling DELETION of the entire feature search index
        // choice(name: 'UPDATE_FEATURES', choices: ['NO', 'UPDATE', 'DELETE_UPDATE'], description: 'Update entire feature search index: complete rebuild of the feature search index')

        string(name: 'TASK_NAME', defaultValue: 'updateSearchIndex', description: 'Name of the GRETL task to be started to rebuild the feature search index')
    }

    stages {
        stage('git checkout'){
            when { expression { params.UPDATE_LAYERS || params.UPDATE_FEATURES } }
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
            }
        }
        stage('UPDATE LAYERS: Run GRETL job') {
            when { expression { params.UPDATE_LAYERS } }
            steps {
                container('gretl') {
                    dir(env.JOB_BASE_NAME) {
                        sh 'gretl'
                    }
                }
            }
        }
        stage('UPDATE FEATURES: Find and Execute Tasks') {
            when { expression { params.UPDATE_FEATURES } }
            steps {
                container('gretl') {
                    script {
                        def taskToRun = params.TASK_NAME
                        def gradleCommand = 'gretl'         //gradle command in der GRETL-Umgebung

                        // Alle build.gradle Dateien finden
                        echo "Suche nach GRETL-Jobs mit Task: ${taskToRun}"
                        def gradleProjects = findFiles(glob: "**/build.gradle")
                        echo "Gefundene GRETL-Jobs: ${gradleProjects.size()}"

                        // Statistik
                        def tasksFound = 0
                        def tasksExecuted = 0

                        // Jeden GRETL-Job verarbeiten
                        gradleProjects.each { project ->
                            def projectPath = project.path
                            def projectDir = projectPath.substring(0, projectPath.lastIndexOf('/'))

                            echo "Pr√ºfe GRETL-Job in: ${projectDir}"

                            try {
                                // Inhalt der build.gradle Datei lesen
                                def buildFileContent = readFile(file: projectPath)

                                // Verschiedene Muster f√ºr Task-Definitionen suchen
                                def containsTask = (buildFileContent =~ /(?i)task\s+${taskToRun}/).find()

                                if (containsTask) {
                                    tasksFound++
                                    echo "üîé Task '${taskToRun}' in ${projectDir} gefunden"

                                    // In das Projekt-Verzeichnis wechseln
                                    dir(projectDir) {
                                        // Den Task ausf√ºhren
                                        try {
                                            //echo "${gradleCommand} ${taskToRun} --console=plain"

                                            def gradleOutput = sh(script: "${gradleCommand} ${taskToRun} --console=plain", returnStdout: true).trim()
                                            echo gradleOutput

                                            tasksExecuted++
                                            echo "‚úÖ Task '${taskToRun}' in ${projectDir} erfolgreich ausgef√ºhrt"
                                        } catch (Exception e) {
                                            echo "‚ö†Ô∏è Fehler beim Ausf√ºhren von '${taskToRun}' in ${projectDir}: ${e.message}"
                                        }
                                    }
                                } else {
                                    //echo "‚ùå Task '${taskToRun}' nicht gefunden in ${projectDir}"
                                }
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Fehler beim Lesen oder Verarbeiten der build.gradle in ${projectDir}: ${e.message}"
                            }
                        }

                        // Zusammenfassung ausgeben
                        echo "======= Zusammenfassung ======="
                        echo "Task-Name: ${taskToRun}"
                        echo "Gefundene GRETL-Jobs: ${gradleProjects.size()}"
                        echo "GRETL-Jobs mit Task '${taskToRun}': ${tasksFound}"
                        echo "Erfolgreich ausgef√ºhrte Tasks: ${tasksExecuted}"
                        echo "============================"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) abgeschlossen"
            script {
                if (params.UPDATE_FEATURES) {
                    echo "‚úÖ Alle gefundenen '${params.TASK_NAME}'-Tasks wurden erfolgreich ausgef√ºhrt"
                }
            }
        }
        unsuccessful {
            echo "‚ùå GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) fehlgeschlagen"
            emailext (
                to: "${currentBuild.getBuildCauses()[0]._class == 'hudson.model.Cause$UserIdCause' ? emailextrecipients([requestor()]) : '$DEFAULT_RECIPIENTS'}",
                subject: "GRETL-Job ${JOB_NAME} (${BUILD_DISPLAY_NAME}) ist fehlgeschlagen",
                body: "Die Ausf√ºhrung des GRETL-Jobs ${JOB_NAME} (${BUILD_DISPLAY_NAME}) war nicht erfolgreich. Details dazu finden Sie in den Log-Meldungen unter ${RUN_DISPLAY_URL}."
            )
        }
    }

}
