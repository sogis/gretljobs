pipeline {
    agent { label env.NODE_LABEL ?: 'gretl' }

    parameters {
        string(name: 'TASK_NAME', defaultValue: 'createSearchIndex', description: 'Name des zu startenden GRETL-Tasks')
    }

    stages {
        stage('Find and Execute Task') {
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
                container('gretl') {
                    script {
                        def taskToRun = params.TASK_NAME
                        def gradleCommand = 'gretl'         //gradle command in der GRETL-Umgebung

                        // Alle build.gradle Dateien finden
                        echo "Suche nach GRETL-Jobs mit Task: ${taskToRun}"
                        def gradleProjects = findFiles(glob: "**/build.gradle")
                        echo "Gefundene GRETL-Jobs: ${gradleProjects.size()}"

                        // Statistik
                        def tasksFound = 0
                        def tasksExecuted = 0

                        // Jeden GRETL-Job verarbeiten
                        gradleProjects.each { project ->
                            def projectPath = project.path
                            def projectDir = projectPath.substring(0, projectPath.lastIndexOf('/'))

                            echo "Pr√ºfe GRETL-Job in: ${projectDir}"

                            try {
                                // Inhalt der build.gradle Datei lesen
                                def buildFileContent = readFile(file: projectPath)

                                // Verschiedene Muster f√ºr Task-Definitionen suchen
                                def containsTask = (buildFileContent =~ /(?i)task\s+${taskToRun}/).find()

                                if (containsTask) {
                                    tasksFound++
                                    echo "üîé Task '${taskToRun}' in ${projectDir} gefunden"

                                    // In das Projekt-Verzeichnis wechseln
                                    dir(projectDir) {
                                        // Den Task ausf√ºhren
                                        try {
                                            //echo "${gradleCommand} ${taskToRun} --console=plain"

                                            def gradleOutput = sh(script: "${gradleCommand} ${taskToRun} --console=plain", returnStdout: true).trim()
                                            echo gradleOutput

                                            tasksExecuted++
                                            echo "‚úÖ Task '${taskToRun}' in ${projectDir} erfolgreich ausgef√ºhrt"
                                        } catch (Exception e) {
                                            echo "‚ö†Ô∏è Fehler beim Ausf√ºhren von '${taskToRun}' in ${projectDir}: ${e.message}"
                                        }
                                    }
                                } else {
                                    //echo "‚ùå Task '${taskToRun}' nicht gefunden in ${projectDir}"
                                }
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Fehler beim Lesen oder Verarbeiten der build.gradle in ${projectDir}: ${e.message}"
                            }
                        }

                        // Zusammenfassung ausgeben
                        echo "======= Zusammenfassung ======="
                        echo "Task-Name: ${taskToRun}"
                        echo "Gefundene GRETL-Jobs: ${gradleProjects.size()}"
                        echo "GRETL-Jobs mit Task '${taskToRun}': ${tasksFound}"
                        echo "Erfolgreich ausgef√ºhrte Tasks: ${tasksExecuted}"
                        echo "============================"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline f√ºr Task '${params.TASK_NAME}' abgeschlossen"
        }
        success {
            echo "Alle gefundenen '${params.TASK_NAME}'-Tasks wurden erfolgreich ausgef√ºhrt"
        }
        failure {
            echo "Es sind Fehler w√§hrend der Pipeline-Ausf√ºhrung aufgetreten"
        }
    }
}
