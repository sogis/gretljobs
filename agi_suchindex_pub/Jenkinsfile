pipeline {
    agent { label env.NODE_LABEL ?: 'gretl' }

    parameters {
        string(name: 'TASK_NAME', defaultValue: 'refreshSolr', description: 'Name des zu suchenden Gradle-Tasks')
    }

    stages {
        stage('Find and Execute Task') {
            steps {
                git url: "${env.GIT_REPO_URL}", branch: "${params.BRANCH ?: 'main'}", changelog: false
                container('gretl') {
                    def taskToRun = ${params.TASK_NAME}
                    echo "Suche nach Gradle-Projekten mit Task: ${taskToRun}"

                    // Alle build.gradle Dateien finden
                    def gradleProjects = findFiles(glob: "**/build.gradle")
                    echo "Gefundene Gradle-Projekte: ${gradleProjects.size()}"

                    // Statistik
                    def tasksFound = 0
                    def tasksExecuted = 0

                    // Jedes Gradle-Projekt verarbeiten
                    gradleProjects.each { project ->
                        def projectPath = project.path
                        def projectDir = projectPath.substring(0, projectPath.lastIndexOf('/'))

                        echo "Prüfe Gradle-Projekt in: ${projectDir}"

                        try {
                            // Inhalt der build.gradle Datei lesen
                            def buildFileContent = readFile(file: projectPath)

                            // Verschiedene Muster für Task-Definitionen suchen
                            def containsTask = buildFileContent.contains("task ${taskToRun}") ||
                                              buildFileContent.contains("task '${taskToRun}'") ||
                                              buildFileContent.contains("task \"${taskToRun}\"")


                            if (containsTask) {
                                tasksFound++
                                echo "✅ Task '${taskToRun}' in ${projectDir} gefunden (Dateianalyse)"

                                // In das Projekt-Verzeichnis wechseln
                                dir(projectDir) {

                                    def gradleCommand = 'gretl'

                                    // Den Task ausführen
                                    try {

                                        //sh "${gradleCommand} ${taskToRun} --console=plain"
                                        echo "${gradleCommand} ${taskToRun} --console=plain"

                                        tasksExecuted++
                                        echo "✅ Task '${taskToRun}' in ${projectDir} erfolgreich ausgeführt"
                                    } catch (Exception e) {
                                        echo "⚠️ Fehler beim Ausführen von '${taskToRun}' in ${projectDir}: ${e.message}"
                                        // Optional: Trotz Fehler weitermachen, falls nur ein Projekt fehlschlägt
                                    }
                                }
                            } else {
                                //echo "❌ Task '${taskToRun}' nicht gefunden in ${projectDir}"
                            }
                        } catch (Exception e) {
                            echo "⚠️ Fehler beim Lesen oder Verarbeiten der build.gradle in ${projectDir}: ${e.message}"
                        }
                    }

                    // Zusammenfassung ausgeben
                    echo "======= Zusammenfassung ======="
                    echo "Task-Name: ${taskToRun}"
                    echo "Gefundene Gradle-Projekte: ${gradleProjects.size()}"
                    echo "Projekte mit Task '${taskToRun}': ${tasksFound}"
                    echo "Erfolgreich ausgeführte Tasks: ${tasksExecuted}"
                    echo "============================"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline für Task '${params.TASK_NAME}' abgeschlossen"
        }
        success {
            echo "Alle gefundenen '${params.TASK_NAME}'-Tasks wurden erfolgreich ausgeführt"
        }
        failure {
            echo "Es sind Fehler während der Pipeline-Ausführung aufgetreten"
        }
    }
}
