import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet

apply plugin: 'ch.so.agi.gretl'

defaultTasks 'refreshSolr'

task transferData(type: Db2Db) {
    sourceDb = [dbUriEdit, dbUserEdit, dbPwdEdit]
    targetDb = [dbUriPub, dbUserPub, dbPwdPub]
    transferSets = [
            new TransferSet('analyse_standort.sql',
                    'gesa_leistungserbringerstandorte_analyse_pub_v1.analyse_standort', true)
    ]
}
/*
task publishPub(type: Publisher, dependsOn: 'transferData'){
    dataIdent = "ch.so.gesa.leistungserbringerstandorte_erreichbarkeitsanalyse"
    userFormats = true

    database = [dbUriPub, dbUserPub, dbPwdPub]
    dbSchema = "gesa_leistungserbringerstandorte_analyse_pub_v1"
    modelsToPublish = "SO_GESA_Leistungserbringerstandorte_Analyse_Publikation_20231117"

    target = [sftpUrlSogis, sftpUserSogis, sftpPwdSogis]
    kgdiService = [simiMetadataServiceUrl, simiMetadataServiceUser, simiMetadataServicePwd]
    kgdiTokenService = [simiTokenServiceUrl, simiTokenServiceUser, simiTokenServicePwd]
    grooming = new File(file(projectDir).getParentFile(), "publisher_grooming.json")
    if (findProperty('ilivalidatorModeldir')) modeldir = ilivalidatorModeldir
}
task refreshSolr(type:Exec, dependsOn:'publishPub') {
*/
task refreshSolr(type:Exec, dependsOn:'transferData') {
	commandLine 'curl', '-i', '--max-time', '10', solrIndexupdaterBaseUrl + '/queue?ds=ch.so.gesa.leistungserbringerstandorte_erreichbarkeitsanalyse' 
}
